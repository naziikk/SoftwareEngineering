services:
  api_gateway:
    build:
      context: ./api_gate_away
      dockerfile: Dockerfile
    environment:
      - RUNNING_IN_DOCKER=true
    ports:
      - "8009:8009"
    networks:
      - main
    restart: always
    depends_on:
      - payments
      - orders

  payments:
    build:
      context: ./payments_service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    networks:
      - main
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      payments_postgres:
        condition: service_started

  payments_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: api_gate_away
    networks:
      - main
    volumes:
      - payments_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always


  orders:
    build:
      context: ./orders_service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    networks:
      - main
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      orders_postgres:
        condition: service_started

  orders_postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: api_gate_away
    networks:
      - main
    volumes:
      - orders_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      retries: 5
      timeout: 3s
    restart: always

  kafka-init:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    networks:
      - main
    entrypoint: [ "/bin/bash", "-c", "/scripts/create-topics.sh" ]
    volumes:
      - ./scripts:/scripts

  # chmod +x scripts/create-topics.sh

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT_INTERNAL://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_INTERNAL://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_INTERNAL:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - main

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - main

networks:
  main:
    driver: bridge

volumes:
  orders_postgres_data:
  payments_postgres_data:
    driver:
      local