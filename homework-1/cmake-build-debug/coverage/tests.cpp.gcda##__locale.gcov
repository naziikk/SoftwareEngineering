        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.4.sdk/usr/include/c++/v1/__locale
        -:    0:Graph:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcno
        -:    0:Data:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___LOCALE
        -:   11:#define _LIBCPP___LOCALE
        -:   12:
        -:   13:#include <__availability>
        -:   14:#include <__config>
        -:   15:#include <__memory/shared_ptr.h> // __shared_count
        -:   16:#include <__type_traits/make_unsigned.h>
        -:   17:#include <cctype>
        -:   18:#include <clocale>
        -:   19:#include <cstdint>
        -:   20:#include <cstdlib>
        -:   21:#include <mutex>
        -:   22:#include <string>
        -:   23:
        -:   24:// Some platforms require more includes than others. Keep the includes on all plaforms for now.
        -:   25:#include <cstddef>
        -:   26:#include <cstring>
        -:   27:
        -:   28:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:   29:#  include <cwchar>
        -:   30:#else
        -:   31:#  include <__std_mbstate_t.h>
        -:   32:#endif
        -:   33:
        -:   34:#if defined(_LIBCPP_MSVCRT_LIKE)
        -:   35:# include <__support/win32/locale_win32.h>
        -:   36:#elif defined(_AIX) || defined(__MVS__)
        -:   37:# include <__support/ibm/xlocale.h>
        -:   38:#elif defined(__ANDROID__)
        -:   39:# include <__support/android/locale_bionic.h>
        -:   40:#elif defined(_NEWLIB_VERSION)
        -:   41:# include <__support/newlib/xlocale.h>
        -:   42:#elif defined(__OpenBSD__)
        -:   43:# include <__support/openbsd/xlocale.h>
        -:   44:#elif (defined(__APPLE__) || defined(__FreeBSD__))
        -:   45:#   if defined(_LIBCPP_ON_SEP)
        -:   46:#       include <__support/sepos/xlocale.h>
        -:   47:#   else
        -:   48:#       include <xlocale.h>
        -:   49:#   endif
        -:   50:#elif defined(__Fuchsia__)
        -:   51:# include <__support/fuchsia/xlocale.h>
        -:   52:#elif defined(__wasi__)
        -:   53:// WASI libc uses musl's locales support.
        -:   54:# include <__support/musl/xlocale.h>
        -:   55:#elif defined(_LIBCPP_HAS_MUSL_LIBC)
        -:   56:# include <__support/musl/xlocale.h>
        -:   57:#endif
        -:   58:
        -:   59:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   60:#  pragma GCC system_header
        -:   61:#endif
        -:   62:
        -:   63:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   64:
        -:   65:class _LIBCPP_EXPORTED_FROM_ABI locale;
        -:   66:
        -:   67:template <class _Facet>
        -:   68:_LIBCPP_INLINE_VISIBILITY
        -:   69:bool
        -:   70:has_facet(const locale&) _NOEXCEPT;
        -:   71:
        -:   72:template <class _Facet>
        -:   73:_LIBCPP_INLINE_VISIBILITY
        -:   74:const _Facet&
        -:   75:use_facet(const locale&);
        -:   76:
        -:   77:class _LIBCPP_EXPORTED_FROM_ABI locale
        -:   78:{
        -:   79:public:
        -:   80:    // types:
        -:   81:    class _LIBCPP_EXPORTED_FROM_ABI facet;
        -:   82:    class _LIBCPP_EXPORTED_FROM_ABI id;
        -:   83:
        -:   84:    typedef int category;
        -:   85:    _LIBCPP_AVAILABILITY_LOCALE_CATEGORY
        -:   86:    static const category // values assigned here are for exposition only
        -:   87:        none     = 0,
        -:   88:        collate  = LC_COLLATE_MASK,
        -:   89:        ctype    = LC_CTYPE_MASK,
        -:   90:        monetary = LC_MONETARY_MASK,
        -:   91:        numeric  = LC_NUMERIC_MASK,
        -:   92:        time     = LC_TIME_MASK,
        -:   93:        messages = LC_MESSAGES_MASK,
        -:   94:        all = collate | ctype | monetary | numeric | time | messages;
        -:   95:
        -:   96:    // construct/copy/destroy:
        -:   97:    locale()  _NOEXCEPT;
        -:   98:    locale(const locale&)  _NOEXCEPT;
        -:   99:    explicit locale(const char*);
        -:  100:    explicit locale(const string&);
        -:  101:    locale(const locale&, const char*, category);
        -:  102:    locale(const locale&, const string&, category);
        -:  103:    template <class _Facet>
        -:  104:        _LIBCPP_INLINE_VISIBILITY locale(const locale&, _Facet*);
        -:  105:    locale(const locale&, const locale&, category);
        -:  106:
        -:  107:    ~locale();
        -:  108:
        -:  109:    const locale& operator=(const locale&)  _NOEXCEPT;
        -:  110:
        -:  111:    template <class _Facet>
        -:  112:      _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  113:      locale combine(const locale&) const;
        -:  114:
        -:  115:    // locale operations:
        -:  116:    string name() const;
        -:  117:    bool operator==(const locale&) const;
        -:  118:#if _LIBCPP_STD_VER <= 17
        -:  119:    _LIBCPP_HIDE_FROM_ABI bool operator!=(const locale& __y) const {return !(*this == __y);}
        -:  120:#endif
        -:  121:    template <class _CharT, class _Traits, class _Allocator>
        -:  122:      _LIBCPP_METHOD_TEMPLATE_IMPLICIT_INSTANTIATION_VIS
        -:  123:      bool operator()(const basic_string<_CharT, _Traits, _Allocator>&,
        -:  124:                      const basic_string<_CharT, _Traits, _Allocator>&) const;
        -:  125:
        -:  126:    // global locale objects:
        -:  127:    static locale global(const locale&);
        -:  128:    static const locale& classic();
        -:  129:
        -:  130:private:
        -:  131:    class __imp;
        -:  132:    __imp* __locale_;
        -:  133:
        -:  134:    void __install_ctor(const locale&, facet*, long);
        -:  135:    static locale& __global();
        -:  136:    bool has_facet(id&) const;
        -:  137:    const facet* use_facet(id&) const;
        -:  138:
        -:  139:    template <class _Facet> friend bool has_facet(const locale&)  _NOEXCEPT;
        -:  140:    template <class _Facet> friend const _Facet& use_facet(const locale&);
        -:  141:};
        -:  142:
        -:  143:class _LIBCPP_EXPORTED_FROM_ABI locale::facet
        -:  144:    : public __shared_count
        -:  145:{
        -:  146:protected:
        -:  147:    _LIBCPP_INLINE_VISIBILITY
        -:  148:    explicit facet(size_t __refs = 0)
        -:  149:        : __shared_count(static_cast<long>(__refs)-1) {}
        -:  150:
        -:  151:    ~facet() override;
        -:  152:
        -:  153://    facet(const facet&) = delete;     // effectively done in __shared_count
        -:  154://    void operator=(const facet&) = delete;
        -:  155:private:
        -:  156:    void __on_zero_shared() _NOEXCEPT override;
        -:  157:};
        -:  158:
        -:  159:class _LIBCPP_EXPORTED_FROM_ABI locale::id
        -:  160:{
        -:  161:    once_flag      __flag_;
        -:  162:    int32_t        __id_;
        -:  163:
        -:  164:    static int32_t __next_id;
        -:  165:public:
        -:  166:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR id() :__id_(0) {}
        -:  167:    void operator=(const id&) = delete;
        -:  168:    id(const id&) = delete;
        -:  169:
        -:  170:private:
        -:  171:    void __init();
        -:  172:public:  // only needed for tests
        -:  173:    long __get();
        -:  174:
        -:  175:    friend class locale;
        -:  176:    friend class locale::__imp;
        -:  177:};
        -:  178:
        -:  179:template <class _Facet>
        -:  180:inline _LIBCPP_INLINE_VISIBILITY
        -:  181:locale::locale(const locale& __other, _Facet* __f)
        -:  182:{
        -:  183:    __install_ctor(__other, __f, __f ? __f->id.__get() : 0);
        -:  184:}
        -:  185:
        -:  186:template <class _Facet>
        -:  187:locale
        -:  188:locale::combine(const locale& __other) const
        -:  189:{
        -:  190:    if (!_VSTD::has_facet<_Facet>(__other))
        -:  191:        __throw_runtime_error("locale::combine: locale missing facet");
        -:  192:
        -:  193:    return locale(*this, &const_cast<_Facet&>(_VSTD::use_facet<_Facet>(__other)));
        -:  194:}
        -:  195:
        -:  196:template <class _Facet>
        -:  197:inline _LIBCPP_INLINE_VISIBILITY
        -:  198:bool
        -:  199:has_facet(const locale& __l)  _NOEXCEPT
        -:  200:{
        -:  201:    return __l.has_facet(_Facet::id);
        -:  202:}
        -:  203:
        -:  204:template <class _Facet>
        -:  205:inline _LIBCPP_INLINE_VISIBILITY
        -:  206:const _Facet&
function _ZNSt3__19use_facetB8ue170006INS_5ctypeIcEEEERKT_RKNS_6localeE called 0 returned 0% blocks executed 0%
    #####:  207:use_facet(const locale& __l)
        -:  208:{
    #####:  209:    return static_cast<const _Facet&>(*__l.use_facet(_Facet::id));
    $$$$$:  209-block  0
        -:  210:}
        -:  211:
        -:  212:// template <class _CharT> class collate;
        -:  213:
        -:  214:template <class _CharT>
        -:  215:class _LIBCPP_TEMPLATE_VIS collate
        -:  216:    : public locale::facet
        -:  217:{
        -:  218:public:
        -:  219:    typedef _CharT char_type;
        -:  220:    typedef basic_string<char_type> string_type;
        -:  221:
        -:  222:    _LIBCPP_INLINE_VISIBILITY
        -:  223:    explicit collate(size_t __refs = 0)
        -:  224:        : locale::facet(__refs) {}
        -:  225:
        -:  226:    _LIBCPP_INLINE_VISIBILITY
        -:  227:    int compare(const char_type* __lo1, const char_type* __hi1,
        -:  228:                const char_type* __lo2, const char_type* __hi2) const
        -:  229:    {
        -:  230:        return do_compare(__lo1, __hi1, __lo2, __hi2);
        -:  231:    }
        -:  232:
        -:  233:    // FIXME(EricWF): The _LIBCPP_ALWAYS_INLINE is needed on Windows to work
        -:  234:    // around a dllimport bug that expects an external instantiation.
        -:  235:    _LIBCPP_INLINE_VISIBILITY
        -:  236:    _LIBCPP_ALWAYS_INLINE
        -:  237:    string_type transform(const char_type* __lo, const char_type* __hi) const
        -:  238:    {
        -:  239:        return do_transform(__lo, __hi);
        -:  240:    }
        -:  241:
        -:  242:    _LIBCPP_INLINE_VISIBILITY
        -:  243:    long hash(const char_type* __lo, const char_type* __hi) const
        -:  244:    {
        -:  245:        return do_hash(__lo, __hi);
        -:  246:    }
        -:  247:
        -:  248:    static locale::id id;
        -:  249:
        -:  250:protected:
        -:  251:    ~collate() override;
        -:  252:    virtual int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  253:                           const char_type* __lo2, const char_type* __hi2) const;
        -:  254:    virtual string_type do_transform(const char_type* __lo, const char_type* __hi) const
        -:  255:        {return string_type(__lo, __hi);}
        -:  256:    virtual long do_hash(const char_type* __lo, const char_type* __hi) const;
        -:  257:};
        -:  258:
        -:  259:template <class _CharT> locale::id collate<_CharT>::id;
        -:  260:
        -:  261:template <class _CharT>
        -:  262:collate<_CharT>::~collate()
        -:  263:{
        -:  264:}
        -:  265:
        -:  266:template <class _CharT>
        -:  267:int
        -:  268:collate<_CharT>::do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  269:                            const char_type* __lo2, const char_type* __hi2) const
        -:  270:{
        -:  271:    for (; __lo2 != __hi2; ++__lo1, ++__lo2)
        -:  272:    {
        -:  273:        if (__lo1 == __hi1 || *__lo1 < *__lo2)
        -:  274:            return -1;
        -:  275:        if (*__lo2 < *__lo1)
        -:  276:            return 1;
        -:  277:    }
        -:  278:    return __lo1 != __hi1;
        -:  279:}
        -:  280:
        -:  281:template <class _CharT>
        -:  282:long
        -:  283:collate<_CharT>::do_hash(const char_type* __lo, const char_type* __hi) const
        -:  284:{
        -:  285:    size_t __h = 0;
        -:  286:    const size_t __sr = __CHAR_BIT__ * sizeof(size_t) - 8;
        -:  287:    const size_t __mask = size_t(0xF) << (__sr + 4);
        -:  288:    for(const char_type* __p = __lo; __p != __hi; ++__p)
        -:  289:    {
        -:  290:        __h = (__h << 4) + static_cast<size_t>(*__p);
        -:  291:        size_t __g = __h & __mask;
        -:  292:        __h ^= __g | (__g >> __sr);
        -:  293:    }
        -:  294:    return static_cast<long>(__h);
        -:  295:}
        -:  296:
        -:  297:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<char>;
        -:  298:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  299:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS collate<wchar_t>;
        -:  300:#endif
        -:  301:
        -:  302:// template <class CharT> class collate_byname;
        -:  303:
        -:  304:template <class _CharT> class _LIBCPP_TEMPLATE_VIS collate_byname;
        -:  305:
        -:  306:template <>
        -:  307:class _LIBCPP_EXPORTED_FROM_ABI collate_byname<char>
        -:  308:    : public collate<char>
        -:  309:{
        -:  310:    locale_t __l_;
        -:  311:public:
        -:  312:    typedef char char_type;
        -:  313:    typedef basic_string<char_type> string_type;
        -:  314:
        -:  315:    explicit collate_byname(const char* __n, size_t __refs = 0);
        -:  316:    explicit collate_byname(const string& __n, size_t __refs = 0);
        -:  317:
        -:  318:protected:
        -:  319:    ~collate_byname() override;
        -:  320:    int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  321:                   const char_type* __lo2, const char_type* __hi2) const override;
        -:  322:    string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
        -:  323:};
        -:  324:
        -:  325:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  326:template <>
        -:  327:class _LIBCPP_EXPORTED_FROM_ABI collate_byname<wchar_t>
        -:  328:    : public collate<wchar_t>
        -:  329:{
        -:  330:    locale_t __l_;
        -:  331:public:
        -:  332:    typedef wchar_t char_type;
        -:  333:    typedef basic_string<char_type> string_type;
        -:  334:
        -:  335:    explicit collate_byname(const char* __n, size_t __refs = 0);
        -:  336:    explicit collate_byname(const string& __n, size_t __refs = 0);
        -:  337:
        -:  338:protected:
        -:  339:    ~collate_byname() override;
        -:  340:
        -:  341:    int do_compare(const char_type* __lo1, const char_type* __hi1,
        -:  342:                   const char_type* __lo2, const char_type* __hi2) const override;
        -:  343:    string_type do_transform(const char_type* __lo, const char_type* __hi) const override;
        -:  344:};
        -:  345:#endif
        -:  346:
        -:  347:template <class _CharT, class _Traits, class _Allocator>
        -:  348:bool
        -:  349:locale::operator()(const basic_string<_CharT, _Traits, _Allocator>& __x,
        -:  350:                   const basic_string<_CharT, _Traits, _Allocator>& __y) const
        -:  351:{
        -:  352:    return _VSTD::use_facet<_VSTD::collate<_CharT> >(*this).compare(
        -:  353:                                       __x.data(), __x.data() + __x.size(),
        -:  354:                                       __y.data(), __y.data() + __y.size()) < 0;
        -:  355:}
        -:  356:
        -:  357:// template <class charT> class ctype
        -:  358:
        -:  359:class _LIBCPP_EXPORTED_FROM_ABI ctype_base
        -:  360:{
        -:  361:public:
        -:  362:#if defined(_LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE)
        -:  363:    typedef unsigned long mask;
        -:  364:    static const mask space  = 1<<0;
        -:  365:    static const mask print  = 1<<1;
        -:  366:    static const mask cntrl  = 1<<2;
        -:  367:    static const mask upper  = 1<<3;
        -:  368:    static const mask lower  = 1<<4;
        -:  369:    static const mask alpha  = 1<<5;
        -:  370:    static const mask digit  = 1<<6;
        -:  371:    static const mask punct  = 1<<7;
        -:  372:    static const mask xdigit = 1<<8;
        -:  373:    static const mask blank  = 1<<9;
        -:  374:#if defined(__BIONIC__)
        -:  375:    // Historically this was a part of regex_traits rather than ctype_base. The
        -:  376:    // historical value of the constant is preserved for ABI compatibility.
        -:  377:    static const mask __regex_word = 0x8000;
        -:  378:#else
        -:  379:    static const mask __regex_word = 1<<10;
        -:  380:#endif // defined(__BIONIC__)
        -:  381:#elif defined(__GLIBC__)
        -:  382:    typedef unsigned short mask;
        -:  383:    static const mask space  = _ISspace;
        -:  384:    static const mask print  = _ISprint;
        -:  385:    static const mask cntrl  = _IScntrl;
        -:  386:    static const mask upper  = _ISupper;
        -:  387:    static const mask lower  = _ISlower;
        -:  388:    static const mask alpha  = _ISalpha;
        -:  389:    static const mask digit  = _ISdigit;
        -:  390:    static const mask punct  = _ISpunct;
        -:  391:    static const mask xdigit = _ISxdigit;
        -:  392:    static const mask blank  = _ISblank;
        -:  393:#if defined(__mips__)
        -:  394:    static const mask __regex_word = static_cast<mask>(_ISbit(15));
        -:  395:#else
        -:  396:    static const mask __regex_word = 0x80;
        -:  397:#endif
        -:  398:#elif defined(_LIBCPP_MSVCRT_LIKE)
        -:  399:    typedef unsigned short mask;
        -:  400:    static const mask space  = _SPACE;
        -:  401:    static const mask print  = _BLANK|_PUNCT|_ALPHA|_DIGIT;
        -:  402:    static const mask cntrl  = _CONTROL;
        -:  403:    static const mask upper  = _UPPER;
        -:  404:    static const mask lower  = _LOWER;
        -:  405:    static const mask alpha  = _ALPHA;
        -:  406:    static const mask digit  = _DIGIT;
        -:  407:    static const mask punct  = _PUNCT;
        -:  408:    static const mask xdigit = _HEX;
        -:  409:    static const mask blank  = _BLANK;
        -:  410:    static const mask __regex_word = 0x4000; // 0x8000 and 0x0100 and 0x00ff are used
        -:  411:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
        -:  412:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_ALPHA
        -:  413:#elif defined(__APPLE__) || defined(__FreeBSD__) || defined(__EMSCRIPTEN__) || defined(__NetBSD__)
        -:  414:# ifdef __APPLE__
        -:  415:    typedef __uint32_t mask;
        -:  416:# elif defined(__FreeBSD__)
        -:  417:    typedef unsigned long mask;
        -:  418:# elif defined(__EMSCRIPTEN__) || defined(__NetBSD__)
        -:  419:    typedef unsigned short mask;
        -:  420:# endif
        -:  421:    static const mask space  = _CTYPE_S;
        -:  422:    static const mask print  = _CTYPE_R;
        -:  423:    static const mask cntrl  = _CTYPE_C;
        -:  424:    static const mask upper  = _CTYPE_U;
        -:  425:    static const mask lower  = _CTYPE_L;
        -:  426:    static const mask alpha  = _CTYPE_A;
        -:  427:    static const mask digit  = _CTYPE_D;
        -:  428:    static const mask punct  = _CTYPE_P;
        -:  429:    static const mask xdigit = _CTYPE_X;
        -:  430:
        -:  431:# if defined(__NetBSD__)
        -:  432:    static const mask blank  = _CTYPE_BL;
        -:  433:    // NetBSD defines classes up to 0x2000
        -:  434:    // see sys/ctype_bits.h, _CTYPE_Q
        -:  435:    static const mask __regex_word = 0x8000;
        -:  436:# else
        -:  437:    static const mask blank  = _CTYPE_B;
        -:  438:    static const mask __regex_word = 0x80;
        -:  439:# endif
        -:  440:#elif defined(_AIX)
        -:  441:    typedef unsigned int mask;
        -:  442:    static const mask space  = _ISSPACE;
        -:  443:    static const mask print  = _ISPRINT;
        -:  444:    static const mask cntrl  = _ISCNTRL;
        -:  445:    static const mask upper  = _ISUPPER;
        -:  446:    static const mask lower  = _ISLOWER;
        -:  447:    static const mask alpha  = _ISALPHA;
        -:  448:    static const mask digit  = _ISDIGIT;
        -:  449:    static const mask punct  = _ISPUNCT;
        -:  450:    static const mask xdigit = _ISXDIGIT;
        -:  451:    static const mask blank  = _ISBLANK;
        -:  452:    static const mask __regex_word = 0x8000;
        -:  453:#elif defined(_NEWLIB_VERSION)
        -:  454:    // Same type as Newlib's _ctype_ array in newlib/libc/include/ctype.h.
        -:  455:    typedef char mask;
        -:  456:    static const mask space  = _S;
        -:  457:    static const mask print  = _P | _U | _L | _N | _B;
        -:  458:    static const mask cntrl  = _C;
        -:  459:    static const mask upper  = _U;
        -:  460:    static const mask lower  = _L;
        -:  461:    static const mask alpha  = _U | _L;
        -:  462:    static const mask digit  = _N;
        -:  463:    static const mask punct  = _P;
        -:  464:    static const mask xdigit = _X | _N;
        -:  465:    static const mask blank  = _B;
        -:  466:    // mask is already fully saturated, use a different type in regex_type_traits.
        -:  467:    static const unsigned short __regex_word = 0x100;
        -:  468:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_PRINT
        -:  469:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_ALPHA
        -:  470:# define _LIBCPP_CTYPE_MASK_IS_COMPOSITE_XDIGIT
        -:  471:#elif defined(__MVS__)
        -:  472:# if defined(__NATIVE_ASCII_F)
        -:  473:    typedef unsigned int mask;
        -:  474:    static const mask space  = _ISSPACE_A;
        -:  475:    static const mask print  = _ISPRINT_A;
        -:  476:    static const mask cntrl  = _ISCNTRL_A;
        -:  477:    static const mask upper  = _ISUPPER_A;
        -:  478:    static const mask lower  = _ISLOWER_A;
        -:  479:    static const mask alpha  = _ISALPHA_A;
        -:  480:    static const mask digit  = _ISDIGIT_A;
        -:  481:    static const mask punct  = _ISPUNCT_A;
        -:  482:    static const mask xdigit = _ISXDIGIT_A;
        -:  483:    static const mask blank  = _ISBLANK_A;
        -:  484:# else
        -:  485:    typedef unsigned short mask;
        -:  486:    static const mask space  = __ISSPACE;
        -:  487:    static const mask print  = __ISPRINT;
        -:  488:    static const mask cntrl  = __ISCNTRL;
        -:  489:    static const mask upper  = __ISUPPER;
        -:  490:    static const mask lower  = __ISLOWER;
        -:  491:    static const mask alpha  = __ISALPHA;
        -:  492:    static const mask digit  = __ISDIGIT;
        -:  493:    static const mask punct  = __ISPUNCT;
        -:  494:    static const mask xdigit = __ISXDIGIT;
        -:  495:    static const mask blank  = __ISBLANK;
        -:  496:# endif
        -:  497:    static const mask __regex_word = 0x8000;
        -:  498:#else
        -:  499:# error unknown rune table for this platform -- do you mean to define _LIBCPP_PROVIDES_DEFAULT_RUNE_TABLE?
        -:  500:#endif
        -:  501:    static const mask alnum  = alpha | digit;
        -:  502:    static const mask graph  = alnum | punct;
        -:  503:
        -:  504:    _LIBCPP_INLINE_VISIBILITY ctype_base() {}
        -:  505:
        -:  506:    static_assert((__regex_word & ~(std::make_unsigned<mask>::type)(space | print | cntrl | upper | lower | alpha |
        -:  507:                                                                    digit | punct | xdigit | blank)) == __regex_word,
        -:  508:                  "__regex_word can't overlap other bits");
        -:  509:};
        -:  510:
        -:  511:template <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype;
        -:  512:
        -:  513:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  514:template <>
        -:  515:class _LIBCPP_EXPORTED_FROM_ABI ctype<wchar_t>
        -:  516:    : public locale::facet,
        -:  517:      public ctype_base
        -:  518:{
        -:  519:public:
        -:  520:    typedef wchar_t char_type;
        -:  521:
        -:  522:    _LIBCPP_INLINE_VISIBILITY
        -:  523:    explicit ctype(size_t __refs = 0)
        -:  524:        : locale::facet(__refs) {}
        -:  525:
        -:  526:    _LIBCPP_INLINE_VISIBILITY
        -:  527:    bool is(mask __m, char_type __c) const
        -:  528:    {
        -:  529:        return do_is(__m, __c);
        -:  530:    }
        -:  531:
        -:  532:    _LIBCPP_INLINE_VISIBILITY
        -:  533:    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const
        -:  534:    {
        -:  535:        return do_is(__low, __high, __vec);
        -:  536:    }
        -:  537:
        -:  538:    _LIBCPP_INLINE_VISIBILITY
        -:  539:    const char_type* scan_is(mask __m, const char_type* __low, const char_type* __high) const
        -:  540:    {
        -:  541:        return do_scan_is(__m, __low, __high);
        -:  542:    }
        -:  543:
        -:  544:    _LIBCPP_INLINE_VISIBILITY
        -:  545:    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const
        -:  546:    {
        -:  547:        return do_scan_not(__m, __low, __high);
        -:  548:    }
        -:  549:
        -:  550:    _LIBCPP_INLINE_VISIBILITY
        -:  551:    char_type toupper(char_type __c) const
        -:  552:    {
        -:  553:        return do_toupper(__c);
        -:  554:    }
        -:  555:
        -:  556:    _LIBCPP_INLINE_VISIBILITY
        -:  557:    const char_type* toupper(char_type* __low, const char_type* __high) const
        -:  558:    {
        -:  559:        return do_toupper(__low, __high);
        -:  560:    }
        -:  561:
        -:  562:    _LIBCPP_INLINE_VISIBILITY
        -:  563:    char_type tolower(char_type __c) const
        -:  564:    {
        -:  565:        return do_tolower(__c);
        -:  566:    }
        -:  567:
        -:  568:    _LIBCPP_INLINE_VISIBILITY
        -:  569:    const char_type* tolower(char_type* __low, const char_type* __high) const
        -:  570:    {
        -:  571:        return do_tolower(__low, __high);
        -:  572:    }
        -:  573:
        -:  574:    _LIBCPP_INLINE_VISIBILITY
        -:  575:    char_type widen(char __c) const
        -:  576:    {
        -:  577:        return do_widen(__c);
        -:  578:    }
        -:  579:
        -:  580:    _LIBCPP_INLINE_VISIBILITY
        -:  581:    const char* widen(const char* __low, const char* __high, char_type* __to) const
        -:  582:    {
        -:  583:        return do_widen(__low, __high, __to);
        -:  584:    }
        -:  585:
        -:  586:    _LIBCPP_INLINE_VISIBILITY
        -:  587:    char narrow(char_type __c, char __dfault) const
        -:  588:    {
        -:  589:        return do_narrow(__c, __dfault);
        -:  590:    }
        -:  591:
        -:  592:    _LIBCPP_INLINE_VISIBILITY
        -:  593:    const char_type* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const
        -:  594:    {
        -:  595:        return do_narrow(__low, __high, __dfault, __to);
        -:  596:    }
        -:  597:
        -:  598:    static locale::id id;
        -:  599:
        -:  600:protected:
        -:  601:    ~ctype() override;
        -:  602:    virtual bool do_is(mask __m, char_type __c) const;
        -:  603:    virtual const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const;
        -:  604:    virtual const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const;
        -:  605:    virtual const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const;
        -:  606:    virtual char_type do_toupper(char_type) const;
        -:  607:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  608:    virtual char_type do_tolower(char_type) const;
        -:  609:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  610:    virtual char_type do_widen(char) const;
        -:  611:    virtual const char* do_widen(const char* __low, const char* __high, char_type* __dest) const;
        -:  612:    virtual char do_narrow(char_type, char __dfault) const;
        -:  613:    virtual const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const;
        -:  614:};
        -:  615:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  616:
        -:  617:template <>
        -:  618:class _LIBCPP_EXPORTED_FROM_ABI ctype<char>
        -:  619:    : public locale::facet, public ctype_base
        -:  620:{
        -:  621:    const mask* __tab_;
        -:  622:    bool        __del_;
        -:  623:public:
        -:  624:    typedef char char_type;
        -:  625:
        -:  626:    explicit ctype(const mask* __tab = nullptr, bool __del = false, size_t __refs = 0);
        -:  627:
        -:  628:    _LIBCPP_INLINE_VISIBILITY
        -:  629:    bool is(mask __m, char_type __c) const
        -:  630:    {
        -:  631:        return isascii(__c) ? (__tab_[static_cast<int>(__c)] & __m) !=0 : false;
        -:  632:    }
        -:  633:
        -:  634:    _LIBCPP_INLINE_VISIBILITY
        -:  635:    const char_type* is(const char_type* __low, const char_type* __high, mask* __vec) const
        -:  636:    {
        -:  637:        for (; __low != __high; ++__low, ++__vec)
        -:  638:            *__vec = isascii(*__low) ? __tab_[static_cast<int>(*__low)] : 0;
        -:  639:        return __low;
        -:  640:    }
        -:  641:
        -:  642:    _LIBCPP_INLINE_VISIBILITY
        -:  643:    const char_type* scan_is (mask __m, const char_type* __low, const char_type* __high) const
        -:  644:    {
        -:  645:        for (; __low != __high; ++__low)
        -:  646:            if (isascii(*__low) && (__tab_[static_cast<int>(*__low)] & __m))
        -:  647:                break;
        -:  648:        return __low;
        -:  649:    }
        -:  650:
        -:  651:    _LIBCPP_INLINE_VISIBILITY
        -:  652:    const char_type* scan_not(mask __m, const char_type* __low, const char_type* __high) const
        -:  653:    {
        -:  654:        for (; __low != __high; ++__low)
        -:  655:            if (!isascii(*__low) || !(__tab_[static_cast<int>(*__low)] & __m))
        -:  656:                break;
        -:  657:        return __low;
        -:  658:    }
        -:  659:
        -:  660:    _LIBCPP_INLINE_VISIBILITY
        -:  661:    char_type toupper(char_type __c) const
        -:  662:    {
        -:  663:        return do_toupper(__c);
        -:  664:    }
        -:  665:
        -:  666:    _LIBCPP_INLINE_VISIBILITY
        -:  667:    const char_type* toupper(char_type* __low, const char_type* __high) const
        -:  668:    {
        -:  669:        return do_toupper(__low, __high);
        -:  670:    }
        -:  671:
        -:  672:    _LIBCPP_INLINE_VISIBILITY
        -:  673:    char_type tolower(char_type __c) const
        -:  674:    {
        -:  675:        return do_tolower(__c);
        -:  676:    }
        -:  677:
        -:  678:    _LIBCPP_INLINE_VISIBILITY
        -:  679:    const char_type* tolower(char_type* __low, const char_type* __high) const
        -:  680:    {
        -:  681:        return do_tolower(__low, __high);
        -:  682:    }
        -:  683:
        -:  684:    _LIBCPP_INLINE_VISIBILITY
function _ZNKSt3__15ctypeIcE5widenB8ue170006Ec called 0 returned 0% blocks executed 0%
    #####:  685:    char_type widen(char __c) const
        -:  686:    {
    #####:  687:        return do_widen(__c);
    $$$$$:  687-block  0
        -:  688:    }
        -:  689:
        -:  690:    _LIBCPP_INLINE_VISIBILITY
        -:  691:    const char* widen(const char* __low, const char* __high, char_type* __to) const
        -:  692:    {
        -:  693:        return do_widen(__low, __high, __to);
        -:  694:    }
        -:  695:
        -:  696:    _LIBCPP_INLINE_VISIBILITY
        -:  697:    char narrow(char_type __c, char __dfault) const
        -:  698:    {
        -:  699:        return do_narrow(__c, __dfault);
        -:  700:    }
        -:  701:
        -:  702:    _LIBCPP_INLINE_VISIBILITY
        -:  703:    const char* narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const
        -:  704:    {
        -:  705:        return do_narrow(__low, __high, __dfault, __to);
        -:  706:    }
        -:  707:
        -:  708:    static locale::id id;
        -:  709:
        -:  710:#ifdef _CACHED_RUNES
        -:  711:    static const size_t table_size = _CACHED_RUNES;
        -:  712:#else
        -:  713:    static const size_t table_size = 256;  // FIXME: Don't hardcode this.
        -:  714:#endif
        -:  715:    _LIBCPP_INLINE_VISIBILITY const mask* table() const  _NOEXCEPT {return __tab_;}
        -:  716:    static const mask* classic_table()  _NOEXCEPT;
        -:  717:#if defined(__GLIBC__) || defined(__EMSCRIPTEN__)
        -:  718:    static const int* __classic_upper_table() _NOEXCEPT;
        -:  719:    static const int* __classic_lower_table() _NOEXCEPT;
        -:  720:#endif
        -:  721:#if defined(__NetBSD__)
        -:  722:    static const short* __classic_upper_table() _NOEXCEPT;
        -:  723:    static const short* __classic_lower_table() _NOEXCEPT;
        -:  724:#endif
        -:  725:#if defined(__MVS__)
        -:  726:    static const unsigned short* __classic_upper_table() _NOEXCEPT;
        -:  727:    static const unsigned short* __classic_lower_table() _NOEXCEPT;
        -:  728:#endif
        -:  729:
        -:  730:protected:
        -:  731:    ~ctype() override;
        -:  732:    virtual char_type do_toupper(char_type __c) const;
        -:  733:    virtual const char_type* do_toupper(char_type* __low, const char_type* __high) const;
        -:  734:    virtual char_type do_tolower(char_type __c) const;
        -:  735:    virtual const char_type* do_tolower(char_type* __low, const char_type* __high) const;
        -:  736:    virtual char_type do_widen(char __c) const;
        -:  737:    virtual const char* do_widen(const char* __low, const char* __high, char_type* __to) const;
        -:  738:    virtual char do_narrow(char_type __c, char __dfault) const;
        -:  739:    virtual const char* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __to) const;
        -:  740:};
        -:  741:
        -:  742:// template <class CharT> class ctype_byname;
        -:  743:
        -:  744:template <class _CharT> class _LIBCPP_TEMPLATE_VIS ctype_byname;
        -:  745:
        -:  746:template <>
        -:  747:class _LIBCPP_EXPORTED_FROM_ABI ctype_byname<char>
        -:  748:    : public ctype<char>
        -:  749:{
        -:  750:    locale_t __l_;
        -:  751:
        -:  752:public:
        -:  753:    explicit ctype_byname(const char*, size_t = 0);
        -:  754:    explicit ctype_byname(const string&, size_t = 0);
        -:  755:
        -:  756:protected:
        -:  757:    ~ctype_byname() override;
        -:  758:    char_type do_toupper(char_type) const override;
        -:  759:    const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
        -:  760:    char_type do_tolower(char_type) const override;
        -:  761:    const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
        -:  762:};
        -:  763:
        -:  764:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  765:template <>
        -:  766:class _LIBCPP_EXPORTED_FROM_ABI ctype_byname<wchar_t>
        -:  767:    : public ctype<wchar_t>
        -:  768:{
        -:  769:    locale_t __l_;
        -:  770:
        -:  771:public:
        -:  772:    explicit ctype_byname(const char*, size_t = 0);
        -:  773:    explicit ctype_byname(const string&, size_t = 0);
        -:  774:
        -:  775:protected:
        -:  776:    ~ctype_byname() override;
        -:  777:    bool do_is(mask __m, char_type __c) const override;
        -:  778:    const char_type* do_is(const char_type* __low, const char_type* __high, mask* __vec) const override;
        -:  779:    const char_type* do_scan_is(mask __m, const char_type* __low, const char_type* __high) const override;
        -:  780:    const char_type* do_scan_not(mask __m, const char_type* __low, const char_type* __high) const override;
        -:  781:    char_type do_toupper(char_type) const override;
        -:  782:    const char_type* do_toupper(char_type* __low, const char_type* __high) const override;
        -:  783:    char_type do_tolower(char_type) const override;
        -:  784:    const char_type* do_tolower(char_type* __low, const char_type* __high) const override;
        -:  785:    char_type do_widen(char) const override;
        -:  786:    const char* do_widen(const char* __low, const char* __high, char_type* __dest) const override;
        -:  787:    char do_narrow(char_type, char __dfault) const override;
        -:  788:    const char_type* do_narrow(const char_type* __low, const char_type* __high, char __dfault, char* __dest) const override;
        -:  789:};
        -:  790:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -:  791:
        -:  792:template <class _CharT>
        -:  793:inline _LIBCPP_INLINE_VISIBILITY
        -:  794:bool
        -:  795:isspace(_CharT __c, const locale& __loc)
        -:  796:{
        -:  797:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c);
        -:  798:}
        -:  799:
        -:  800:template <class _CharT>
        -:  801:inline _LIBCPP_INLINE_VISIBILITY
        -:  802:bool
        -:  803:isprint(_CharT __c, const locale& __loc)
        -:  804:{
        -:  805:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c);
        -:  806:}
        -:  807:
        -:  808:template <class _CharT>
        -:  809:inline _LIBCPP_INLINE_VISIBILITY
        -:  810:bool
        -:  811:iscntrl(_CharT __c, const locale& __loc)
        -:  812:{
        -:  813:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c);
        -:  814:}
        -:  815:
        -:  816:template <class _CharT>
        -:  817:inline _LIBCPP_INLINE_VISIBILITY
        -:  818:bool
        -:  819:isupper(_CharT __c, const locale& __loc)
        -:  820:{
        -:  821:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c);
        -:  822:}
        -:  823:
        -:  824:template <class _CharT>
        -:  825:inline _LIBCPP_INLINE_VISIBILITY
        -:  826:bool
        -:  827:islower(_CharT __c, const locale& __loc)
        -:  828:{
        -:  829:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c);
        -:  830:}
        -:  831:
        -:  832:template <class _CharT>
        -:  833:inline _LIBCPP_INLINE_VISIBILITY
        -:  834:bool
        -:  835:isalpha(_CharT __c, const locale& __loc)
        -:  836:{
        -:  837:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c);
        -:  838:}
        -:  839:
        -:  840:template <class _CharT>
        -:  841:inline _LIBCPP_INLINE_VISIBILITY
        -:  842:bool
        -:  843:isdigit(_CharT __c, const locale& __loc)
        -:  844:{
        -:  845:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c);
        -:  846:}
        -:  847:
        -:  848:template <class _CharT>
        -:  849:inline _LIBCPP_INLINE_VISIBILITY
        -:  850:bool
        -:  851:ispunct(_CharT __c, const locale& __loc)
        -:  852:{
        -:  853:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c);
        -:  854:}
        -:  855:
        -:  856:template <class _CharT>
        -:  857:inline _LIBCPP_INLINE_VISIBILITY
        -:  858:bool
        -:  859:isxdigit(_CharT __c, const locale& __loc)
        -:  860:{
        -:  861:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c);
        -:  862:}
        -:  863:
        -:  864:template <class _CharT>
        -:  865:inline _LIBCPP_INLINE_VISIBILITY
        -:  866:bool
        -:  867:isalnum(_CharT __c, const locale& __loc)
        -:  868:{
        -:  869:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c);
        -:  870:}
        -:  871:
        -:  872:template <class _CharT>
        -:  873:inline _LIBCPP_INLINE_VISIBILITY
        -:  874:bool
        -:  875:isgraph(_CharT __c, const locale& __loc)
        -:  876:{
        -:  877:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c);
        -:  878:}
        -:  879:
        -:  880:template <class _CharT>
        -:  881:_LIBCPP_HIDE_FROM_ABI bool isblank(_CharT __c, const locale& __loc) {
        -:  882:    return std::use_facet<ctype<_CharT> >(__loc).is(ctype_base::blank, __c);
        -:  883:}
        -:  884:
        -:  885:template <class _CharT>
        -:  886:inline _LIBCPP_INLINE_VISIBILITY
        -:  887:_CharT
        -:  888:toupper(_CharT __c, const locale& __loc)
        -:  889:{
        -:  890:    return std::use_facet<ctype<_CharT> >(__loc).toupper(__c);
        -:  891:}
        -:  892:
        -:  893:template <class _CharT>
        -:  894:inline _LIBCPP_INLINE_VISIBILITY
        -:  895:_CharT
        -:  896:tolower(_CharT __c, const locale& __loc)
        -:  897:{
        -:  898:    return std::use_facet<ctype<_CharT> >(__loc).tolower(__c);
        -:  899:}
        -:  900:
        -:  901:// codecvt_base
        -:  902:
        -:  903:class _LIBCPP_EXPORTED_FROM_ABI codecvt_base
        -:  904:{
        -:  905:public:
        -:  906:    _LIBCPP_INLINE_VISIBILITY codecvt_base() {}
        -:  907:    enum result {ok, partial, error, noconv};
        -:  908:};
        -:  909:
        -:  910:// template <class internT, class externT, class stateT> class codecvt;
        -:  911:
        -:  912:template <class _InternT, class _ExternT, class _StateT> class _LIBCPP_TEMPLATE_VIS codecvt;
        -:  913:
        -:  914:// template <> class codecvt<char, char, mbstate_t>
        -:  915:
        -:  916:template <>
        -:  917:class _LIBCPP_EXPORTED_FROM_ABI codecvt<char, char, mbstate_t>
        -:  918:    : public locale::facet,
        -:  919:      public codecvt_base
        -:  920:{
        -:  921:public:
        -:  922:    typedef char      intern_type;
        -:  923:    typedef char      extern_type;
        -:  924:    typedef mbstate_t state_type;
        -:  925:
        -:  926:    _LIBCPP_INLINE_VISIBILITY
        -:  927:    explicit codecvt(size_t __refs = 0)
        -:  928:        : locale::facet(__refs) {}
        -:  929:
        -:  930:    _LIBCPP_INLINE_VISIBILITY
        -:  931:    result out(state_type& __st,
        -:  932:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -:  933:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -:  934:    {
        -:  935:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -:  936:    }
        -:  937:
        -:  938:    _LIBCPP_INLINE_VISIBILITY
        -:  939:    result unshift(state_type& __st,
        -:  940:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -:  941:    {
        -:  942:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -:  943:    }
        -:  944:
        -:  945:    _LIBCPP_INLINE_VISIBILITY
        -:  946:    result in(state_type& __st,
        -:  947:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -:  948:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -:  949:    {
        -:  950:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -:  951:    }
        -:  952:
        -:  953:    _LIBCPP_INLINE_VISIBILITY
        -:  954:    int encoding() const  _NOEXCEPT
        -:  955:    {
        -:  956:        return do_encoding();
        -:  957:    }
        -:  958:
        -:  959:    _LIBCPP_INLINE_VISIBILITY
        -:  960:    bool always_noconv() const  _NOEXCEPT
        -:  961:    {
        -:  962:        return do_always_noconv();
        -:  963:    }
        -:  964:
        -:  965:    _LIBCPP_INLINE_VISIBILITY
        -:  966:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -:  967:    {
        -:  968:        return do_length(__st, __frm, __end, __mx);
        -:  969:    }
        -:  970:
        -:  971:    _LIBCPP_INLINE_VISIBILITY
        -:  972:    int max_length() const  _NOEXCEPT
        -:  973:    {
        -:  974:        return do_max_length();
        -:  975:    }
        -:  976:
        -:  977:    static locale::id id;
        -:  978:
        -:  979:protected:
        -:  980:    _LIBCPP_INLINE_VISIBILITY
        -:  981:    explicit codecvt(const char*, size_t __refs = 0)
        -:  982:        : locale::facet(__refs) {}
        -:  983:
        -:  984:    ~codecvt() override;
        -:  985:
        -:  986:    virtual result do_out(state_type& __st,
        -:  987:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -:  988:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -:  989:    virtual result do_in(state_type& __st,
        -:  990:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -:  991:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -:  992:    virtual result do_unshift(state_type& __st,
        -:  993:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -:  994:    virtual int do_encoding() const  _NOEXCEPT;
        -:  995:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -:  996:    virtual int do_length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -:  997:    virtual int do_max_length() const  _NOEXCEPT;
        -:  998:};
        -:  999:
        -: 1000:// template <> class codecvt<wchar_t, char, mbstate_t>
        -: 1001:
        -: 1002:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1003:template <>
        -: 1004:class _LIBCPP_EXPORTED_FROM_ABI codecvt<wchar_t, char, mbstate_t>
        -: 1005:    : public locale::facet,
        -: 1006:      public codecvt_base
        -: 1007:{
        -: 1008:    locale_t __l_;
        -: 1009:public:
        -: 1010:    typedef wchar_t   intern_type;
        -: 1011:    typedef char      extern_type;
        -: 1012:    typedef mbstate_t state_type;
        -: 1013:
        -: 1014:    explicit codecvt(size_t __refs = 0);
        -: 1015:
        -: 1016:    _LIBCPP_INLINE_VISIBILITY
        -: 1017:    result out(state_type& __st,
        -: 1018:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1019:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1020:    {
        -: 1021:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1022:    }
        -: 1023:
        -: 1024:    _LIBCPP_INLINE_VISIBILITY
        -: 1025:    result unshift(state_type& __st,
        -: 1026:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1027:    {
        -: 1028:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1029:    }
        -: 1030:
        -: 1031:    _LIBCPP_INLINE_VISIBILITY
        -: 1032:    result in(state_type& __st,
        -: 1033:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1034:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1035:    {
        -: 1036:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1037:    }
        -: 1038:
        -: 1039:    _LIBCPP_INLINE_VISIBILITY
        -: 1040:    int encoding() const  _NOEXCEPT
        -: 1041:    {
        -: 1042:        return do_encoding();
        -: 1043:    }
        -: 1044:
        -: 1045:    _LIBCPP_INLINE_VISIBILITY
        -: 1046:    bool always_noconv() const  _NOEXCEPT
        -: 1047:    {
        -: 1048:        return do_always_noconv();
        -: 1049:    }
        -: 1050:
        -: 1051:    _LIBCPP_INLINE_VISIBILITY
        -: 1052:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1053:    {
        -: 1054:        return do_length(__st, __frm, __end, __mx);
        -: 1055:    }
        -: 1056:
        -: 1057:    _LIBCPP_INLINE_VISIBILITY
        -: 1058:    int max_length() const  _NOEXCEPT
        -: 1059:    {
        -: 1060:        return do_max_length();
        -: 1061:    }
        -: 1062:
        -: 1063:    static locale::id id;
        -: 1064:
        -: 1065:protected:
        -: 1066:    explicit codecvt(const char*, size_t __refs = 0);
        -: 1067:
        -: 1068:    ~codecvt() override;
        -: 1069:
        -: 1070:    virtual result do_out(state_type& __st,
        -: 1071:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1072:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1073:    virtual result do_in(state_type& __st,
        -: 1074:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1075:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1076:    virtual result do_unshift(state_type& __st,
        -: 1077:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1078:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1079:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1080:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1081:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1082:};
        -: 1083:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1084:
        -: 1085:// template <> class codecvt<char16_t, char, mbstate_t> // deprecated in C++20
        -: 1086:
        -: 1087:template <>
        -: 1088:class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXPORTED_FROM_ABI codecvt<char16_t, char, mbstate_t>
        -: 1089:    : public locale::facet,
        -: 1090:      public codecvt_base
        -: 1091:{
        -: 1092:public:
        -: 1093:    typedef char16_t  intern_type;
        -: 1094:    typedef char      extern_type;
        -: 1095:    typedef mbstate_t state_type;
        -: 1096:
        -: 1097:    _LIBCPP_INLINE_VISIBILITY
        -: 1098:    explicit codecvt(size_t __refs = 0)
        -: 1099:        : locale::facet(__refs) {}
        -: 1100:
        -: 1101:    _LIBCPP_INLINE_VISIBILITY
        -: 1102:    result out(state_type& __st,
        -: 1103:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1104:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1105:    {
        -: 1106:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1107:    }
        -: 1108:
        -: 1109:    _LIBCPP_INLINE_VISIBILITY
        -: 1110:    result unshift(state_type& __st,
        -: 1111:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1112:    {
        -: 1113:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1114:    }
        -: 1115:
        -: 1116:    _LIBCPP_INLINE_VISIBILITY
        -: 1117:    result in(state_type& __st,
        -: 1118:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1119:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1120:    {
        -: 1121:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1122:    }
        -: 1123:
        -: 1124:    _LIBCPP_INLINE_VISIBILITY
        -: 1125:    int encoding() const  _NOEXCEPT
        -: 1126:    {
        -: 1127:        return do_encoding();
        -: 1128:    }
        -: 1129:
        -: 1130:    _LIBCPP_INLINE_VISIBILITY
        -: 1131:    bool always_noconv() const  _NOEXCEPT
        -: 1132:    {
        -: 1133:        return do_always_noconv();
        -: 1134:    }
        -: 1135:
        -: 1136:    _LIBCPP_INLINE_VISIBILITY
        -: 1137:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1138:    {
        -: 1139:        return do_length(__st, __frm, __end, __mx);
        -: 1140:    }
        -: 1141:
        -: 1142:    _LIBCPP_INLINE_VISIBILITY
        -: 1143:    int max_length() const  _NOEXCEPT
        -: 1144:    {
        -: 1145:        return do_max_length();
        -: 1146:    }
        -: 1147:
        -: 1148:    static locale::id id;
        -: 1149:
        -: 1150:protected:
        -: 1151:    _LIBCPP_INLINE_VISIBILITY
        -: 1152:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1153:        : locale::facet(__refs) {}
        -: 1154:
        -: 1155:    ~codecvt() override;
        -: 1156:
        -: 1157:    virtual result do_out(state_type& __st,
        -: 1158:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1159:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1160:    virtual result do_in(state_type& __st,
        -: 1161:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1162:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1163:    virtual result do_unshift(state_type& __st,
        -: 1164:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1165:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1166:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1167:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1168:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1169:};
        -: 1170:
        -: 1171:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1172:
        -: 1173:// template <> class codecvt<char16_t, char8_t, mbstate_t> // C++20
        -: 1174:
        -: 1175:template <>
        -: 1176:class _LIBCPP_EXPORTED_FROM_ABI codecvt<char16_t, char8_t, mbstate_t>
        -: 1177:    : public locale::facet,
        -: 1178:      public codecvt_base
        -: 1179:{
        -: 1180:public:
        -: 1181:    typedef char16_t  intern_type;
        -: 1182:    typedef char8_t   extern_type;
        -: 1183:    typedef mbstate_t state_type;
        -: 1184:
        -: 1185:    _LIBCPP_INLINE_VISIBILITY
        -: 1186:    explicit codecvt(size_t __refs = 0)
        -: 1187:        : locale::facet(__refs) {}
        -: 1188:
        -: 1189:    _LIBCPP_INLINE_VISIBILITY
        -: 1190:    result out(state_type& __st,
        -: 1191:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1192:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1193:    {
        -: 1194:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1195:    }
        -: 1196:
        -: 1197:    _LIBCPP_INLINE_VISIBILITY
        -: 1198:    result unshift(state_type& __st,
        -: 1199:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1200:    {
        -: 1201:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1202:    }
        -: 1203:
        -: 1204:    _LIBCPP_INLINE_VISIBILITY
        -: 1205:    result in(state_type& __st,
        -: 1206:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1207:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1208:    {
        -: 1209:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1210:    }
        -: 1211:
        -: 1212:    _LIBCPP_INLINE_VISIBILITY
        -: 1213:    int encoding() const  _NOEXCEPT
        -: 1214:    {
        -: 1215:        return do_encoding();
        -: 1216:    }
        -: 1217:
        -: 1218:    _LIBCPP_INLINE_VISIBILITY
        -: 1219:    bool always_noconv() const  _NOEXCEPT
        -: 1220:    {
        -: 1221:        return do_always_noconv();
        -: 1222:    }
        -: 1223:
        -: 1224:    _LIBCPP_INLINE_VISIBILITY
        -: 1225:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1226:    {
        -: 1227:        return do_length(__st, __frm, __end, __mx);
        -: 1228:    }
        -: 1229:
        -: 1230:    _LIBCPP_INLINE_VISIBILITY
        -: 1231:    int max_length() const  _NOEXCEPT
        -: 1232:    {
        -: 1233:        return do_max_length();
        -: 1234:    }
        -: 1235:
        -: 1236:    static locale::id id;
        -: 1237:
        -: 1238:protected:
        -: 1239:    _LIBCPP_INLINE_VISIBILITY
        -: 1240:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1241:        : locale::facet(__refs) {}
        -: 1242:
        -: 1243:    ~codecvt() override;
        -: 1244:
        -: 1245:    virtual result do_out(state_type& __st,
        -: 1246:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1247:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1248:    virtual result do_in(state_type& __st,
        -: 1249:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1250:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1251:    virtual result do_unshift(state_type& __st,
        -: 1252:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1253:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1254:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1255:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1256:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1257:};
        -: 1258:
        -: 1259:#endif
        -: 1260:
        -: 1261:// template <> class codecvt<char32_t, char, mbstate_t> // deprecated in C++20
        -: 1262:
        -: 1263:template <>
        -: 1264:class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXPORTED_FROM_ABI codecvt<char32_t, char, mbstate_t>
        -: 1265:    : public locale::facet,
        -: 1266:      public codecvt_base
        -: 1267:{
        -: 1268:public:
        -: 1269:    typedef char32_t  intern_type;
        -: 1270:    typedef char      extern_type;
        -: 1271:    typedef mbstate_t state_type;
        -: 1272:
        -: 1273:    _LIBCPP_INLINE_VISIBILITY
        -: 1274:    explicit codecvt(size_t __refs = 0)
        -: 1275:        : locale::facet(__refs) {}
        -: 1276:
        -: 1277:    _LIBCPP_INLINE_VISIBILITY
        -: 1278:    result out(state_type& __st,
        -: 1279:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1280:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1281:    {
        -: 1282:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1283:    }
        -: 1284:
        -: 1285:    _LIBCPP_INLINE_VISIBILITY
        -: 1286:    result unshift(state_type& __st,
        -: 1287:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1288:    {
        -: 1289:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1290:    }
        -: 1291:
        -: 1292:    _LIBCPP_INLINE_VISIBILITY
        -: 1293:    result in(state_type& __st,
        -: 1294:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1295:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1296:    {
        -: 1297:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1298:    }
        -: 1299:
        -: 1300:    _LIBCPP_INLINE_VISIBILITY
        -: 1301:    int encoding() const  _NOEXCEPT
        -: 1302:    {
        -: 1303:        return do_encoding();
        -: 1304:    }
        -: 1305:
        -: 1306:    _LIBCPP_INLINE_VISIBILITY
        -: 1307:    bool always_noconv() const  _NOEXCEPT
        -: 1308:    {
        -: 1309:        return do_always_noconv();
        -: 1310:    }
        -: 1311:
        -: 1312:    _LIBCPP_INLINE_VISIBILITY
        -: 1313:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1314:    {
        -: 1315:        return do_length(__st, __frm, __end, __mx);
        -: 1316:    }
        -: 1317:
        -: 1318:    _LIBCPP_INLINE_VISIBILITY
        -: 1319:    int max_length() const  _NOEXCEPT
        -: 1320:    {
        -: 1321:        return do_max_length();
        -: 1322:    }
        -: 1323:
        -: 1324:    static locale::id id;
        -: 1325:
        -: 1326:protected:
        -: 1327:    _LIBCPP_INLINE_VISIBILITY
        -: 1328:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1329:        : locale::facet(__refs) {}
        -: 1330:
        -: 1331:    ~codecvt() override;
        -: 1332:
        -: 1333:    virtual result do_out(state_type& __st,
        -: 1334:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1335:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1336:    virtual result do_in(state_type& __st,
        -: 1337:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1338:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1339:    virtual result do_unshift(state_type& __st,
        -: 1340:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1341:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1342:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1343:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1344:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1345:};
        -: 1346:
        -: 1347:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1348:
        -: 1349:// template <> class codecvt<char32_t, char8_t, mbstate_t> // C++20
        -: 1350:
        -: 1351:template <>
        -: 1352:class _LIBCPP_EXPORTED_FROM_ABI codecvt<char32_t, char8_t, mbstate_t>
        -: 1353:    : public locale::facet,
        -: 1354:      public codecvt_base
        -: 1355:{
        -: 1356:public:
        -: 1357:    typedef char32_t  intern_type;
        -: 1358:    typedef char8_t   extern_type;
        -: 1359:    typedef mbstate_t state_type;
        -: 1360:
        -: 1361:    _LIBCPP_INLINE_VISIBILITY
        -: 1362:    explicit codecvt(size_t __refs = 0)
        -: 1363:        : locale::facet(__refs) {}
        -: 1364:
        -: 1365:    _LIBCPP_INLINE_VISIBILITY
        -: 1366:    result out(state_type& __st,
        -: 1367:               const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1368:               extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1369:    {
        -: 1370:        return do_out(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1371:    }
        -: 1372:
        -: 1373:    _LIBCPP_INLINE_VISIBILITY
        -: 1374:    result unshift(state_type& __st,
        -: 1375:                   extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const
        -: 1376:    {
        -: 1377:        return do_unshift(__st, __to, __to_end, __to_nxt);
        -: 1378:    }
        -: 1379:
        -: 1380:    _LIBCPP_INLINE_VISIBILITY
        -: 1381:    result in(state_type& __st,
        -: 1382:              const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1383:              intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const
        -: 1384:    {
        -: 1385:        return do_in(__st, __frm, __frm_end, __frm_nxt, __to, __to_end, __to_nxt);
        -: 1386:    }
        -: 1387:
        -: 1388:    _LIBCPP_INLINE_VISIBILITY
        -: 1389:    int encoding() const  _NOEXCEPT
        -: 1390:    {
        -: 1391:        return do_encoding();
        -: 1392:    }
        -: 1393:
        -: 1394:    _LIBCPP_INLINE_VISIBILITY
        -: 1395:    bool always_noconv() const  _NOEXCEPT
        -: 1396:    {
        -: 1397:        return do_always_noconv();
        -: 1398:    }
        -: 1399:
        -: 1400:    _LIBCPP_INLINE_VISIBILITY
        -: 1401:    int length(state_type& __st, const extern_type* __frm, const extern_type* __end, size_t __mx) const
        -: 1402:    {
        -: 1403:        return do_length(__st, __frm, __end, __mx);
        -: 1404:    }
        -: 1405:
        -: 1406:    _LIBCPP_INLINE_VISIBILITY
        -: 1407:    int max_length() const  _NOEXCEPT
        -: 1408:    {
        -: 1409:        return do_max_length();
        -: 1410:    }
        -: 1411:
        -: 1412:    static locale::id id;
        -: 1413:
        -: 1414:protected:
        -: 1415:    _LIBCPP_INLINE_VISIBILITY
        -: 1416:    explicit codecvt(const char*, size_t __refs = 0)
        -: 1417:        : locale::facet(__refs) {}
        -: 1418:
        -: 1419:    ~codecvt() override;
        -: 1420:
        -: 1421:    virtual result do_out(state_type& __st,
        -: 1422:                          const intern_type* __frm, const intern_type* __frm_end, const intern_type*& __frm_nxt,
        -: 1423:                          extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1424:    virtual result do_in(state_type& __st,
        -: 1425:                         const extern_type* __frm, const extern_type* __frm_end, const extern_type*& __frm_nxt,
        -: 1426:                         intern_type* __to, intern_type* __to_end, intern_type*& __to_nxt) const;
        -: 1427:    virtual result do_unshift(state_type& __st,
        -: 1428:                              extern_type* __to, extern_type* __to_end, extern_type*& __to_nxt) const;
        -: 1429:    virtual int do_encoding() const  _NOEXCEPT;
        -: 1430:    virtual bool do_always_noconv() const  _NOEXCEPT;
        -: 1431:    virtual int do_length(state_type&, const extern_type* __frm, const extern_type* __end, size_t __mx) const;
        -: 1432:    virtual int do_max_length() const  _NOEXCEPT;
        -: 1433:};
        -: 1434:
        -: 1435:#endif
        -: 1436:
        -: 1437:// template <class _InternT, class _ExternT, class _StateT> class codecvt_byname
        -: 1438:
        -: 1439:template <class _InternT, class _ExternT, class _StateT>
        -: 1440:class _LIBCPP_TEMPLATE_VIS codecvt_byname
        -: 1441:    : public codecvt<_InternT, _ExternT, _StateT>
        -: 1442:{
        -: 1443:public:
        -: 1444:    _LIBCPP_INLINE_VISIBILITY
        -: 1445:    explicit codecvt_byname(const char* __nm, size_t __refs = 0)
        -: 1446:        : codecvt<_InternT, _ExternT, _StateT>(__nm, __refs) {}
        -: 1447:    _LIBCPP_INLINE_VISIBILITY
        -: 1448:    explicit codecvt_byname(const string& __nm, size_t __refs = 0)
        -: 1449:        : codecvt<_InternT, _ExternT, _StateT>(__nm.c_str(), __refs) {}
        -: 1450:protected:
        -: 1451:    ~codecvt_byname() override;
        -: 1452:};
        -: 1453:
        -: 1454:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1455:template <class _InternT, class _ExternT, class _StateT>
        -: 1456:codecvt_byname<_InternT, _ExternT, _StateT>::~codecvt_byname()
        -: 1457:{
        -: 1458:}
        -: 1459:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1460:
        -: 1461:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char, char, mbstate_t>;
        -: 1462:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1463:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<wchar_t, char, mbstate_t>;
        -: 1464:#endif
        -: 1465:extern template class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char16_t, char, mbstate_t>; // deprecated in C++20
        -: 1466:extern template class _LIBCPP_DEPRECATED_IN_CXX20 _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char32_t, char, mbstate_t>; // deprecated in C++20
        -: 1467:#ifndef _LIBCPP_HAS_NO_CHAR8_T
        -: 1468:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char16_t, char8_t, mbstate_t>; // C++20
        -: 1469:extern template class _LIBCPP_EXTERN_TEMPLATE_TYPE_VIS codecvt_byname<char32_t, char8_t, mbstate_t>; // C++20
        -: 1470:#endif
        -: 1471:
        -: 1472:template <size_t _Np>
        -: 1473:struct __narrow_to_utf8
        -: 1474:{
        -: 1475:    template <class _OutputIterator, class _CharT>
        -: 1476:    _OutputIterator
        -: 1477:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const;
        -: 1478:};
        -: 1479:
        -: 1480:template <>
        -: 1481:struct __narrow_to_utf8<8>
        -: 1482:{
        -: 1483:    template <class _OutputIterator, class _CharT>
        -: 1484:    _LIBCPP_INLINE_VISIBILITY
        -: 1485:    _OutputIterator
        -: 1486:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1487:    {
        -: 1488:        for (; __wb < __we; ++__wb, ++__s)
        -: 1489:            *__s = *__wb;
        -: 1490:        return __s;
        -: 1491:    }
        -: 1492:};
        -: 1493:
        -: 1494:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1495:template <>
        -: 1496:struct _LIBCPP_EXPORTED_FROM_ABI __narrow_to_utf8<16>
        -: 1497:    : public codecvt<char16_t, char, mbstate_t>
        -: 1498:{
        -: 1499:    _LIBCPP_INLINE_VISIBILITY
        -: 1500:    __narrow_to_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
        -: 1501:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1502:
        -: 1503:    ~__narrow_to_utf8() override;
        -: 1504:
        -: 1505:    template <class _OutputIterator, class _CharT>
        -: 1506:    _LIBCPP_INLINE_VISIBILITY
        -: 1507:    _OutputIterator
        -: 1508:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1509:    {
        -: 1510:        result __r = ok;
        -: 1511:        mbstate_t __mb;
        -: 1512:        while (__wb < __we && __r != error)
        -: 1513:        {
        -: 1514:            const int __sz = 32;
        -: 1515:            char __buf[__sz];
        -: 1516:            char* __bn;
        -: 1517:            const char16_t* __wn = (const char16_t*)__wb;
        -: 1518:            __r = do_out(__mb, (const char16_t*)__wb, (const char16_t*)__we, __wn,
        -: 1519:                         __buf, __buf+__sz, __bn);
        -: 1520:            if (__r == codecvt_base::error || __wn == (const char16_t*)__wb)
        -: 1521:                __throw_runtime_error("locale not supported");
        -: 1522:            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1523:                *__s = *__p;
        -: 1524:            __wb = (const _CharT*)__wn;
        -: 1525:        }
        -: 1526:        return __s;
        -: 1527:    }
        -: 1528:};
        -: 1529:
        -: 1530:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1531:template <>
        -: 1532:struct _LIBCPP_EXPORTED_FROM_ABI __narrow_to_utf8<32>
        -: 1533:    : public codecvt<char32_t, char, mbstate_t>
        -: 1534:{
        -: 1535:    _LIBCPP_INLINE_VISIBILITY
        -: 1536:    __narrow_to_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
        -: 1537:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1538:
        -: 1539:    ~__narrow_to_utf8() override;
        -: 1540:
        -: 1541:    template <class _OutputIterator, class _CharT>
        -: 1542:    _LIBCPP_INLINE_VISIBILITY
        -: 1543:    _OutputIterator
        -: 1544:    operator()(_OutputIterator __s, const _CharT* __wb, const _CharT* __we) const
        -: 1545:    {
        -: 1546:        result __r = ok;
        -: 1547:        mbstate_t __mb;
        -: 1548:        while (__wb < __we && __r != error)
        -: 1549:        {
        -: 1550:            const int __sz = 32;
        -: 1551:            char __buf[__sz];
        -: 1552:            char* __bn;
        -: 1553:            const char32_t* __wn = (const char32_t*)__wb;
        -: 1554:            __r = do_out(__mb, (const char32_t*)__wb, (const char32_t*)__we, __wn,
        -: 1555:                         __buf, __buf+__sz, __bn);
        -: 1556:            if (__r == codecvt_base::error || __wn == (const char32_t*)__wb)
        -: 1557:                __throw_runtime_error("locale not supported");
        -: 1558:            for (const char* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1559:                *__s = *__p;
        -: 1560:            __wb = (const _CharT*)__wn;
        -: 1561:        }
        -: 1562:        return __s;
        -: 1563:    }
        -: 1564:};
        -: 1565:
        -: 1566:template <size_t _Np>
        -: 1567:struct __widen_from_utf8
        -: 1568:{
        -: 1569:    template <class _OutputIterator>
        -: 1570:    _OutputIterator
        -: 1571:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const;
        -: 1572:};
        -: 1573:
        -: 1574:template <>
        -: 1575:struct __widen_from_utf8<8>
        -: 1576:{
        -: 1577:    template <class _OutputIterator>
        -: 1578:    _LIBCPP_INLINE_VISIBILITY
        -: 1579:    _OutputIterator
        -: 1580:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1581:    {
        -: 1582:        for (; __nb < __ne; ++__nb, ++__s)
        -: 1583:            *__s = *__nb;
        -: 1584:        return __s;
        -: 1585:    }
        -: 1586:};
        -: 1587:
        -: 1588:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1589:template <>
        -: 1590:struct _LIBCPP_EXPORTED_FROM_ABI __widen_from_utf8<16>
        -: 1591:    : public codecvt<char16_t, char, mbstate_t>
        -: 1592:{
        -: 1593:    _LIBCPP_INLINE_VISIBILITY
        -: 1594:    __widen_from_utf8() : codecvt<char16_t, char, mbstate_t>(1) {}
        -: 1595:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1596:
        -: 1597:    ~__widen_from_utf8() override;
        -: 1598:
        -: 1599:    template <class _OutputIterator>
        -: 1600:    _LIBCPP_INLINE_VISIBILITY
        -: 1601:    _OutputIterator
        -: 1602:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1603:    {
        -: 1604:        result __r = ok;
        -: 1605:        mbstate_t __mb;
        -: 1606:        while (__nb < __ne && __r != error)
        -: 1607:        {
        -: 1608:            const int __sz = 32;
        -: 1609:            char16_t __buf[__sz];
        -: 1610:            char16_t* __bn;
        -: 1611:            const char* __nn = __nb;
        -: 1612:            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,
        -: 1613:                        __buf, __buf+__sz, __bn);
        -: 1614:            if (__r == codecvt_base::error || __nn == __nb)
        -: 1615:                __throw_runtime_error("locale not supported");
        -: 1616:            for (const char16_t* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1617:                *__s = *__p;
        -: 1618:            __nb = __nn;
        -: 1619:        }
        -: 1620:        return __s;
        -: 1621:    }
        -: 1622:};
        -: 1623:
        -: 1624:_LIBCPP_SUPPRESS_DEPRECATED_PUSH
        -: 1625:template <>
        -: 1626:struct _LIBCPP_EXPORTED_FROM_ABI __widen_from_utf8<32>
        -: 1627:    : public codecvt<char32_t, char, mbstate_t>
        -: 1628:{
        -: 1629:    _LIBCPP_INLINE_VISIBILITY
        -: 1630:    __widen_from_utf8() : codecvt<char32_t, char, mbstate_t>(1) {}
        -: 1631:_LIBCPP_SUPPRESS_DEPRECATED_POP
        -: 1632:
        -: 1633:    ~__widen_from_utf8() override;
        -: 1634:
        -: 1635:    template <class _OutputIterator>
        -: 1636:    _LIBCPP_INLINE_VISIBILITY
        -: 1637:    _OutputIterator
        -: 1638:    operator()(_OutputIterator __s, const char* __nb, const char* __ne) const
        -: 1639:    {
        -: 1640:        result __r = ok;
        -: 1641:        mbstate_t __mb;
        -: 1642:        while (__nb < __ne && __r != error)
        -: 1643:        {
        -: 1644:            const int __sz = 32;
        -: 1645:            char32_t __buf[__sz];
        -: 1646:            char32_t* __bn;
        -: 1647:            const char* __nn = __nb;
        -: 1648:            __r = do_in(__mb, __nb, __ne - __nb > __sz ? __nb+__sz : __ne, __nn,
        -: 1649:                        __buf, __buf+__sz, __bn);
        -: 1650:            if (__r == codecvt_base::error || __nn == __nb)
        -: 1651:                __throw_runtime_error("locale not supported");
        -: 1652:            for (const char32_t* __p = __buf; __p < __bn; ++__p, ++__s)
        -: 1653:                *__s = *__p;
        -: 1654:            __nb = __nn;
        -: 1655:        }
        -: 1656:        return __s;
        -: 1657:    }
        -: 1658:};
        -: 1659:
        -: 1660:// template <class charT> class numpunct
        -: 1661:
        -: 1662:template <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct;
        -: 1663:
        -: 1664:template <>
        -: 1665:class _LIBCPP_EXPORTED_FROM_ABI numpunct<char>
        -: 1666:    : public locale::facet
        -: 1667:{
        -: 1668:public:
        -: 1669:    typedef char char_type;
        -: 1670:    typedef basic_string<char_type> string_type;
        -: 1671:
        -: 1672:    explicit numpunct(size_t __refs = 0);
        -: 1673:
        -: 1674:    _LIBCPP_INLINE_VISIBILITY char_type decimal_point() const {return do_decimal_point();}
        -: 1675:    _LIBCPP_INLINE_VISIBILITY char_type thousands_sep() const {return do_thousands_sep();}
        -: 1676:    _LIBCPP_INLINE_VISIBILITY string grouping() const         {return do_grouping();}
        -: 1677:    _LIBCPP_INLINE_VISIBILITY string_type truename() const    {return do_truename();}
        -: 1678:    _LIBCPP_INLINE_VISIBILITY string_type falsename() const   {return do_falsename();}
        -: 1679:
        -: 1680:    static locale::id id;
        -: 1681:
        -: 1682:protected:
        -: 1683:    ~numpunct() override;
        -: 1684:    virtual char_type do_decimal_point() const;
        -: 1685:    virtual char_type do_thousands_sep() const;
        -: 1686:    virtual string do_grouping() const;
        -: 1687:    virtual string_type do_truename() const;
        -: 1688:    virtual string_type do_falsename() const;
        -: 1689:
        -: 1690:    char_type __decimal_point_;
        -: 1691:    char_type __thousands_sep_;
        -: 1692:    string __grouping_;
        -: 1693:};
        -: 1694:
        -: 1695:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1696:template <>
        -: 1697:class _LIBCPP_EXPORTED_FROM_ABI numpunct<wchar_t>
        -: 1698:    : public locale::facet
        -: 1699:{
        -: 1700:public:
        -: 1701:    typedef wchar_t char_type;
        -: 1702:    typedef basic_string<char_type> string_type;
        -: 1703:
        -: 1704:    explicit numpunct(size_t __refs = 0);
        -: 1705:
        -: 1706:    _LIBCPP_INLINE_VISIBILITY char_type decimal_point() const {return do_decimal_point();}
        -: 1707:    _LIBCPP_INLINE_VISIBILITY char_type thousands_sep() const {return do_thousands_sep();}
        -: 1708:    _LIBCPP_INLINE_VISIBILITY string grouping() const         {return do_grouping();}
        -: 1709:    _LIBCPP_INLINE_VISIBILITY string_type truename() const    {return do_truename();}
        -: 1710:    _LIBCPP_INLINE_VISIBILITY string_type falsename() const   {return do_falsename();}
        -: 1711:
        -: 1712:    static locale::id id;
        -: 1713:
        -: 1714:protected:
        -: 1715:    ~numpunct() override;
        -: 1716:    virtual char_type do_decimal_point() const;
        -: 1717:    virtual char_type do_thousands_sep() const;
        -: 1718:    virtual string do_grouping() const;
        -: 1719:    virtual string_type do_truename() const;
        -: 1720:    virtual string_type do_falsename() const;
        -: 1721:
        -: 1722:    char_type __decimal_point_;
        -: 1723:    char_type __thousands_sep_;
        -: 1724:    string __grouping_;
        -: 1725:};
        -: 1726:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1727:
        -: 1728:// template <class charT> class numpunct_byname
        -: 1729:
        -: 1730:template <class _CharT> class _LIBCPP_TEMPLATE_VIS numpunct_byname;
        -: 1731:
        -: 1732:template <>
        -: 1733:class _LIBCPP_EXPORTED_FROM_ABI numpunct_byname<char>
        -: 1734:: public numpunct<char>
        -: 1735:{
        -: 1736:public:
        -: 1737:    typedef char char_type;
        -: 1738:    typedef basic_string<char_type> string_type;
        -: 1739:
        -: 1740:    explicit numpunct_byname(const char* __nm, size_t __refs = 0);
        -: 1741:    explicit numpunct_byname(const string& __nm, size_t __refs = 0);
        -: 1742:
        -: 1743:protected:
        -: 1744:    ~numpunct_byname() override;
        -: 1745:
        -: 1746:private:
        -: 1747:    void __init(const char*);
        -: 1748:};
        -: 1749:
        -: 1750:#ifndef _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1751:template <>
        -: 1752:class _LIBCPP_EXPORTED_FROM_ABI numpunct_byname<wchar_t>
        -: 1753:: public numpunct<wchar_t>
        -: 1754:{
        -: 1755:public:
        -: 1756:    typedef wchar_t char_type;
        -: 1757:    typedef basic_string<char_type> string_type;
        -: 1758:
        -: 1759:    explicit numpunct_byname(const char* __nm, size_t __refs = 0);
        -: 1760:    explicit numpunct_byname(const string& __nm, size_t __refs = 0);
        -: 1761:
        -: 1762:protected:
        -: 1763:    ~numpunct_byname() override;
        -: 1764:
        -: 1765:private:
        -: 1766:    void __init(const char*);
        -: 1767:};
        -: 1768:#endif // _LIBCPP_HAS_NO_WIDE_CHARACTERS
        -: 1769:
        -: 1770:_LIBCPP_END_NAMESPACE_STD
        -: 1771:
        -: 1772:#endif // _LIBCPP___LOCALE
