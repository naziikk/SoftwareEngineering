        -:    0:Source:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/src/../include/Zoo/../Animal/Animal.h
        -:    0:Graph:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/src/Zoo.cpp.gcno
        -:    0:Data:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/src/Zoo.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include "../InterfaceAliveInterface.h"
        -:    3:#include "../InterfaceInventory.h"
        -:    4:#include <iostream>
        -:    5:
        -:    6:class Animal : public Alive, public Inventory {
        -:    7:protected:
        -:    8:    int food_rate_;
        -:    9:    int inventory_number_;
        -:   10:    bool is_healthy_;
        -:   11:    std::string name_;
        -:   12:    std::string type_; // herbo/predator
        -:   13:
        -:   14:public:
        -:   15:    Animal(std::string name, int food_rate, int inventory_number, bool is_healthy, std::string type)
        -:   16:        : name_(name), food_rate_(food_rate), inventory_number_(inventory_number),
        -:   17:        is_healthy_(is_healthy), type_(type){};
        -:   18:
        -:   19:    int GetFoodRate() override {
        -:   20:        return food_rate_;
        -:   21:    }
        -:   22:
        -:   23:    int InventoryNumber() const override {
        -:   24:        return inventory_number_;
        -:   25:    }
        -:   26:
function _ZNK6Animal9IsHealthyEv called 0 returned 0% blocks executed 0%
    #####:   27:    bool IsHealthy() const {
    #####:   28:        return is_healthy_;
    $$$$$:   28-block  0
        -:   29:    }
        -:   30:
function _ZNK6Animal7GetTypeEv called 0 returned 0% blocks executed 0%
    #####:   31:    std::string GetType() const {
    #####:   32:        return type_;
    $$$$$:   32-block  0
        -:   33:    }
        -:   34:    virtual std::string GetName() const = 0;
        -:   35:};
        -:   36:
        -:   37:class Herbo : public Animal {
        -:   38:protected:
        -:   39:    int kindness;
        -:   40:
        -:   41:public:
        -:   42:    Herbo(std::string name, int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   43:        : Animal(name, food_rate, inventory_number, is_healthy, "herbo"), kindness(kindness){};
        -:   44:
function _ZNK5Herbo21CanInteractWithPeopleEv called 0 returned 0% blocks executed 0%
    #####:   45:    bool CanInteractWithPeople() const {
    #####:   46:        return kindness > 5;
    $$$$$:   46-block  0
        -:   47:    }
        -:   48:};
        -:   49:
        -:   50:class Predator : public Animal {
        -:   51:public:
        -:   52:    Predator(std::string name, int food_rate, int inventory_number, bool is_healthy)
        -:   53:        : Animal(name, food_rate, inventory_number, is_healthy, "predator"){};
        -:   54:};
        -:   55:
        -:   56:class Monkey : public Herbo {
        -:   57:public:
        -:   58:    Monkey(int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   59:        : Herbo("Monkey", food_rate, inventory_number, is_healthy, kindness){};
        -:   60:
        -:   61:    std::string GetName() const override {
        -:   62:        return name_;
        -:   63:    }
        -:   64:};
        -:   65:
        -:   66:class Rabbit : public Herbo {
        -:   67:public:
        -:   68:    Rabbit(int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   69:        : Herbo("Rabbit", food_rate, inventory_number, is_healthy, kindness){};
        -:   70:
        -:   71:    std::string GetName() const override {
        -:   72:        return name_;
        -:   73:    }
        -:   74:};
        -:   75:
        -:   76:class Wolf : public Predator {
        -:   77:public:
        -:   78:    Wolf(int food_rate, int inventory_number, bool is_healthy)
        -:   79:        : Predator("Wolf", food_rate, inventory_number, is_healthy){};
        -:   80:
        -:   81:    std::string GetName() const override {
        -:   82:        return name_;
        -:   83:    }
        -:   84:};
        -:   85:
        -:   86:class Tiger : public Predator {
        -:   87:public:
        -:   88:    Tiger(int food_rate, int inventory_number, bool is_healthy)
        -:   89:        : Predator("Tiger", food_rate, inventory_number, is_healthy){};
        -:   90:
        -:   91:    std::string GetName() const override {
        -:   92:        return name_;
        -:   93:    }
        -:   94:};
