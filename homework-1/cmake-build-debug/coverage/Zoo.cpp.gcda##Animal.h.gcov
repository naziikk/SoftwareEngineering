        -:    0:Source:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/src/../include/Zoo/../Animal/Animal.h
        -:    0:Graph:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/src/Zoo.cpp.gcno
        -:    0:Data:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/src/Zoo.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#pragma once
        -:    2:#include "../InterfaceAliveInterface.h"
        -:    3:#include "../InterfaceInventory.h"
        -:    4:#include <iostream>
        -:    5:
        -:    6:class Animal : public Alive, public Inventory {
        -:    7:protected:
        -:    8:    int food_rate_;
        -:    9:    int inventory_number_;
        -:   10:    bool is_healthy_;
        -:   11:    std::string name_;
        -:   12:    std::string type_; // herbo/predator
        -:   13:
        -:   14:public:
        -:   15:    Animal(std::string name, int food_rate, int inventory_number, bool is_healthy, std::string type)
        -:   16:        : name_(name), food_rate_(food_rate), inventory_number_(inventory_number),
        -:   17:        is_healthy_(is_healthy), type_(type){};
        -:   18:
        -:   19:    int GetFoodRate() override {
        -:   20:        return food_rate_;
        -:   21:    }
        -:   22:
        -:   23:    int InventoryNumber() const override {
        -:   24:        return inventory_number_;
        -:   25:    }
        -:   26:
function _ZNK6Animal9IsHealthyEv called 0 returned 0% blocks executed 0%
    #####:   27:    bool IsHealthy() const {
    #####:   28:        return is_healthy_;
    $$$$$:   28-block  0
        -:   29:    }
        -:   30:
function _ZNK6Animal7GetTypeEv called 0 returned 0% blocks executed 0%
    #####:   31:    std::string GetType() const {
    #####:   32:        return type_;
    $$$$$:   32-block  0
        -:   33:    }
        -:   34:
        -:   35:    void Treat() {
        -:   36:        is_healthy_ = true;
        -:   37:    }
        -:   38:
        -:   39:    virtual std::string GetName() const = 0;
        -:   40:};
        -:   41:
        -:   42:class Herbo : public Animal {
        -:   43:protected:
        -:   44:    int kindness;
        -:   45:
        -:   46:public:
        -:   47:    Herbo(std::string name, int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   48:        : Animal(name, food_rate, inventory_number, is_healthy, "herbo"), kindness(kindness){};
        -:   49:
function _ZNK5Herbo21CanInteractWithPeopleEv called 0 returned 0% blocks executed 0%
    #####:   50:    bool CanInteractWithPeople() const {
    #####:   51:        return kindness > 5;
    $$$$$:   51-block  0
        -:   52:    }
        -:   53:};
        -:   54:
        -:   55:class Predator : public Animal {
        -:   56:public:
        -:   57:    Predator(std::string name, int food_rate, int inventory_number, bool is_healthy)
        -:   58:        : Animal(name, food_rate, inventory_number, is_healthy, "predator"){};
        -:   59:};
        -:   60:
        -:   61:class Monkey : public Herbo {
        -:   62:public:
        -:   63:    Monkey(int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   64:        : Herbo("Monkey", food_rate, inventory_number, is_healthy, kindness){};
        -:   65:
        -:   66:    std::string GetName() const override {
        -:   67:        return name_;
        -:   68:    }
        -:   69:};
        -:   70:
        -:   71:class Rabbit : public Herbo {
        -:   72:public:
        -:   73:    Rabbit(int food_rate, int inventory_number, bool is_healthy, int kindness)
        -:   74:        : Herbo("Rabbit", food_rate, inventory_number, is_healthy, kindness){};
        -:   75:
        -:   76:    std::string GetName() const override {
        -:   77:        return name_;
        -:   78:    }
        -:   79:};
        -:   80:
        -:   81:class Wolf : public Predator {
        -:   82:public:
        -:   83:    Wolf(int food_rate, int inventory_number, bool is_healthy)
        -:   84:        : Predator("Wolf", food_rate, inventory_number, is_healthy){};
        -:   85:
        -:   86:    std::string GetName() const override {
        -:   87:        return name_;
        -:   88:    }
        -:   89:};
        -:   90:
        -:   91:class Tiger : public Predator {
        -:   92:public:
        -:   93:    Tiger(int food_rate, int inventory_number, bool is_healthy)
        -:   94:        : Predator("Tiger", food_rate, inventory_number, is_healthy){};
        -:   95:
        -:   96:    std::string GetName() const override {
        -:   97:        return name_;
        -:   98:    }
        -:   99:};
