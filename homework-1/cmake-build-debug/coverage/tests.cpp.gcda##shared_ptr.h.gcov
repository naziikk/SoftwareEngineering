        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.4.sdk/usr/include/c++/v1/__memory/shared_ptr.h
        -:    0:Graph:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcno
        -:    0:Data:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// -*- C++ -*-
        -:    2://===----------------------------------------------------------------------===//
        -:    3://
        -:    4:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    5:// See https://llvm.org/LICENSE.txt for license information.
        -:    6:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    7://
        -:    8://===----------------------------------------------------------------------===//
        -:    9:
        -:   10:#ifndef _LIBCPP___MEMORY_SHARED_PTR_H
        -:   11:#define _LIBCPP___MEMORY_SHARED_PTR_H
        -:   12:
        -:   13:#include <__availability>
        -:   14:#include <__compare/compare_three_way.h>
        -:   15:#include <__compare/ordering.h>
        -:   16:#include <__config>
        -:   17:#include <__functional/binary_function.h>
        -:   18:#include <__functional/operations.h>
        -:   19:#include <__functional/reference_wrapper.h>
        -:   20:#include <__iterator/access.h>
        -:   21:#include <__memory/addressof.h>
        -:   22:#include <__memory/allocation_guard.h>
        -:   23:#include <__memory/allocator.h>
        -:   24:#include <__memory/allocator_destructor.h>
        -:   25:#include <__memory/allocator_traits.h>
        -:   26:#include <__memory/auto_ptr.h>
        -:   27:#include <__memory/compressed_pair.h>
        -:   28:#include <__memory/construct_at.h>
        -:   29:#include <__memory/pointer_traits.h>
        -:   30:#include <__memory/uninitialized_algorithms.h>
        -:   31:#include <__memory/unique_ptr.h>
        -:   32:#include <__type_traits/add_lvalue_reference.h>
        -:   33:#include <__type_traits/conditional.h>
        -:   34:#include <__type_traits/conjunction.h>
        -:   35:#include <__type_traits/disjunction.h>
        -:   36:#include <__type_traits/is_array.h>
        -:   37:#include <__type_traits/is_bounded_array.h>
        -:   38:#include <__type_traits/is_convertible.h>
        -:   39:#include <__type_traits/is_move_constructible.h>
        -:   40:#include <__type_traits/is_reference.h>
        -:   41:#include <__type_traits/is_unbounded_array.h>
        -:   42:#include <__type_traits/nat.h>
        -:   43:#include <__type_traits/negation.h>
        -:   44:#include <__type_traits/remove_extent.h>
        -:   45:#include <__type_traits/remove_reference.h>
        -:   46:#include <__utility/declval.h>
        -:   47:#include <__utility/forward.h>
        -:   48:#include <__utility/move.h>
        -:   49:#include <__utility/swap.h>
        -:   50:#include <__verbose_abort>
        -:   51:#include <cstddef>
        -:   52:#include <iosfwd>
        -:   53:#include <new>
        -:   54:#include <stdexcept>
        -:   55:#include <typeinfo>
        -:   56:#if !defined(_LIBCPP_HAS_NO_ATOMIC_HEADER)
        -:   57:#  include <__atomic/memory_order.h>
        -:   58:#endif
        -:   59:
        -:   60:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   61:#  pragma GCC system_header
        -:   62:#endif
        -:   63:
        -:   64:_LIBCPP_BEGIN_NAMESPACE_STD
        -:   65:
        -:   66:// NOTE: Relaxed and acq/rel atomics (for increment and decrement respectively)
        -:   67:// should be sufficient for thread safety.
        -:   68:// See https://llvm.org/PR22803
        -:   69:#if defined(__clang__) && __has_builtin(__atomic_add_fetch)          \
        -:   70:                       && defined(__ATOMIC_RELAXED)                  \
        -:   71:                       && defined(__ATOMIC_ACQ_REL)
        -:   72:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -:   73:#elif defined(_LIBCPP_COMPILER_GCC)
        -:   74:#   define _LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT
        -:   75:#endif
        -:   76:
        -:   77:template <class _ValueType>
        -:   78:inline _LIBCPP_INLINE_VISIBILITY
        -:   79:_ValueType __libcpp_relaxed_load(_ValueType const* __value) {
        -:   80:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:   81:    defined(__ATOMIC_RELAXED) &&        \
        -:   82:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:   83:    return __atomic_load_n(__value, __ATOMIC_RELAXED);
        -:   84:#else
        -:   85:    return *__value;
        -:   86:#endif
        -:   87:}
        -:   88:
        -:   89:template <class _ValueType>
        -:   90:inline _LIBCPP_INLINE_VISIBILITY
        -:   91:_ValueType __libcpp_acquire_load(_ValueType const* __value) {
        -:   92:#if !defined(_LIBCPP_HAS_NO_THREADS) && \
        -:   93:    defined(__ATOMIC_ACQUIRE) &&        \
        -:   94:    (__has_builtin(__atomic_load_n) || defined(_LIBCPP_COMPILER_GCC))
        -:   95:    return __atomic_load_n(__value, __ATOMIC_ACQUIRE);
        -:   96:#else
        -:   97:    return *__value;
        -:   98:#endif
        -:   99:}
        -:  100:
        -:  101:template <class _Tp>
        -:  102:inline _LIBCPP_INLINE_VISIBILITY _Tp
function _ZNSt3__134__libcpp_atomic_refcount_incrementB8ue170006IlEET_RS1_ called 1 returned 100% blocks executed 100%
        1:  103:__libcpp_atomic_refcount_increment(_Tp& __t) _NOEXCEPT
        -:  104:{
        -:  105:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        1:  106:    return __atomic_add_fetch(&__t, 1, __ATOMIC_RELAXED);
        1:  106-block  0
        -:  107:#else
        -:  108:    return __t += 1;
        -:  109:#endif
        -:  110:}
        -:  111:
        -:  112:template <class _Tp>
        -:  113:inline _LIBCPP_INLINE_VISIBILITY _Tp
function _ZNSt3__134__libcpp_atomic_refcount_decrementB8ue170006IlEET_RS1_ called 2 returned 100% blocks executed 100%
        2:  114:__libcpp_atomic_refcount_decrement(_Tp& __t) _NOEXCEPT
        -:  115:{
        -:  116:#if defined(_LIBCPP_HAS_BUILTIN_ATOMIC_SUPPORT) && !defined(_LIBCPP_HAS_NO_THREADS)
        2:  117:    return __atomic_add_fetch(&__t, -1, __ATOMIC_ACQ_REL);
        2:  117-block  0
        -:  118:#else
        -:  119:    return __t -= 1;
        -:  120:#endif
        -:  121:}
        -:  122:
        -:  123:class _LIBCPP_EXPORTED_FROM_ABI bad_weak_ptr
        -:  124:    : public std::exception
        -:  125:{
        -:  126:public:
        -:  127:    _LIBCPP_HIDE_FROM_ABI bad_weak_ptr() _NOEXCEPT = default;
        -:  128:    _LIBCPP_HIDE_FROM_ABI bad_weak_ptr(const bad_weak_ptr&) _NOEXCEPT = default;
        -:  129:    ~bad_weak_ptr() _NOEXCEPT override;
        -:  130:    const char* what() const  _NOEXCEPT override;
        -:  131:};
        -:  132:
        -:  133:_LIBCPP_NORETURN inline _LIBCPP_INLINE_VISIBILITY
        -:  134:void __throw_bad_weak_ptr()
        -:  135:{
        -:  136:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  137:    throw bad_weak_ptr();
        -:  138:#else
        -:  139:    std::abort(); // TODO: Workaround to avoid requiring linking against libc++
        -:  140:    // _LIBCPP_VERBOSE_ABORT("bad_weak_ptr was thrown in -fno-exceptions mode");
        -:  141:#endif
        -:  142:}
        -:  143:
        -:  144:template<class _Tp> class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -:  145:
        -:  146:class _LIBCPP_EXPORTED_FROM_ABI __shared_count
        -:  147:{
        -:  148:    __shared_count(const __shared_count&);
        -:  149:    __shared_count& operator=(const __shared_count&);
        -:  150:
        -:  151:protected:
        -:  152:    long __shared_owners_;
        -:  153:    virtual ~__shared_count();
        -:  154:private:
        -:  155:    virtual void __on_zero_shared() _NOEXCEPT = 0;
        -:  156:
        -:  157:public:
        -:  158:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__114__shared_countC2B8ue170006El called 1 returned 100% blocks executed 100%
        1:  159:    explicit __shared_count(long __refs = 0) _NOEXCEPT
        1:  160:        : __shared_owners_(__refs) {}
        1:  160-block  0
        -:  161:
        -:  162:#if defined(_LIBCPP_SHARED_PTR_DEFINE_LEGACY_INLINE_FUNCTIONS)
        -:  163:    void __add_shared() noexcept;
        -:  164:    bool __release_shared() noexcept;
        -:  165:#else
        -:  166:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__114__shared_count12__add_sharedB8ue170006Ev called 1 returned 100% blocks executed 100%
        1:  167:    void __add_shared() _NOEXCEPT {
        1:  168:      __libcpp_atomic_refcount_increment(__shared_owners_);
        1:  169:    }
        1:  169-block  0
        -:  170:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__114__shared_count16__release_sharedB8ue170006Ev called 2 returned 100% blocks executed 100%
        2:  171:    bool __release_shared() _NOEXCEPT {
        2:  172:      if (__libcpp_atomic_refcount_decrement(__shared_owners_) == -1) {
        2:  172-block  0
branch  0 taken 1
branch  1 taken 1
        1:  173:        __on_zero_shared();
        1:  174:        return true;
        1:  174-block  0
        -:  175:      }
        1:  176:      return false;
        1:  176-block  0
        2:  177:    }
        2:  177-block  0
        -:  178:#endif
        -:  179:    _LIBCPP_INLINE_VISIBILITY
        -:  180:    long use_count() const _NOEXCEPT {
        -:  181:        return __libcpp_relaxed_load(&__shared_owners_) + 1;
        -:  182:    }
        -:  183:};
        -:  184:
        -:  185:class _LIBCPP_EXPORTED_FROM_ABI __shared_weak_count
        -:  186:    : private __shared_count
        -:  187:{
        -:  188:    long __shared_weak_owners_;
        -:  189:
        -:  190:public:
        -:  191:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__119__shared_weak_countC2B8ue170006El called 1 returned 100% blocks executed 100%
        1:  192:    explicit __shared_weak_count(long __refs = 0) _NOEXCEPT
        1:  193:        : __shared_count(__refs),
        1:  194:          __shared_weak_owners_(__refs) {}
        1:  194-block  0
        -:  195:protected:
        -:  196:    ~__shared_weak_count() override;
        -:  197:
        -:  198:public:
        -:  199:#if defined(_LIBCPP_SHARED_PTR_DEFINE_LEGACY_INLINE_FUNCTIONS)
        -:  200:    void __add_shared() noexcept;
        -:  201:    void __add_weak() noexcept;
        -:  202:    void __release_shared() noexcept;
        -:  203:#else
        -:  204:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__119__shared_weak_count12__add_sharedB8ue170006Ev called 1 returned 100% blocks executed 100%
        1:  205:    void __add_shared() _NOEXCEPT {
        1:  206:      __shared_count::__add_shared();
        1:  207:    }
        1:  207-block  0
        -:  208:    _LIBCPP_INLINE_VISIBILITY
        -:  209:    void __add_weak() _NOEXCEPT {
        -:  210:      __libcpp_atomic_refcount_increment(__shared_weak_owners_);
        -:  211:    }
        -:  212:    _LIBCPP_INLINE_VISIBILITY
function _ZNSt3__119__shared_weak_count16__release_sharedB8ue170006Ev called 2 returned 100% blocks executed 100%
        2:  213:    void __release_shared() _NOEXCEPT {
        2:  214:      if (__shared_count::__release_shared())
        2:  214-block  0
branch  0 taken 1
branch  1 taken 1
        1:  215:        __release_weak();
        1:  215-block  0
        2:  216:    }
        2:  216-block  0
        -:  217:#endif
        -:  218:    void __release_weak() _NOEXCEPT;
        -:  219:    _LIBCPP_INLINE_VISIBILITY
        -:  220:    long use_count() const _NOEXCEPT {return __shared_count::use_count();}
        -:  221:    __shared_weak_count* lock() _NOEXCEPT;
        -:  222:
        -:  223:    virtual const void* __get_deleter(const type_info&) const _NOEXCEPT;
        -:  224:private:
        -:  225:    virtual void __on_zero_shared_weak() _NOEXCEPT = 0;
        -:  226:};
        -:  227:
        -:  228:template <class _Tp, class _Dp, class _Alloc>
        -:  229:class __shared_ptr_pointer
        -:  230:    : public __shared_weak_count
        -:  231:{
        -:  232:    __compressed_pair<__compressed_pair<_Tp, _Dp>, _Alloc> __data_;
        -:  233:public:
        -:  234:    _LIBCPP_INLINE_VISIBILITY
        -:  235:    __shared_ptr_pointer(_Tp __p, _Dp __d, _Alloc __a)
        -:  236:        :  __data_(__compressed_pair<_Tp, _Dp>(__p, _VSTD::move(__d)), _VSTD::move(__a)) {}
        -:  237:
        -:  238:#ifndef _LIBCPP_HAS_NO_RTTI
        -:  239:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL const void* __get_deleter(const type_info&) const _NOEXCEPT override;
        -:  240:#endif
        -:  241:
        -:  242:private:
        -:  243:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared() _NOEXCEPT override;
        -:  244:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared_weak() _NOEXCEPT override;
        -:  245:};
        -:  246:
        -:  247:#ifndef _LIBCPP_HAS_NO_RTTI
        -:  248:
        -:  249:template <class _Tp, class _Dp, class _Alloc>
        -:  250:const void*
        -:  251:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__get_deleter(const type_info& __t) const _NOEXCEPT
        -:  252:{
        -:  253:    return __t == typeid(_Dp) ? _VSTD::addressof(__data_.first().second()) : nullptr;
        -:  254:}
        -:  255:
        -:  256:#endif // _LIBCPP_HAS_NO_RTTI
        -:  257:
        -:  258:template <class _Tp, class _Dp, class _Alloc>
        -:  259:void
        -:  260:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared() _NOEXCEPT
        -:  261:{
        -:  262:    __data_.first().second()(__data_.first().first());
        -:  263:    __data_.first().second().~_Dp();
        -:  264:}
        -:  265:
        -:  266:template <class _Tp, class _Dp, class _Alloc>
        -:  267:void
        -:  268:__shared_ptr_pointer<_Tp, _Dp, _Alloc>::__on_zero_shared_weak() _NOEXCEPT
        -:  269:{
        -:  270:    typedef typename __allocator_traits_rebind<_Alloc, __shared_ptr_pointer>::type _Al;
        -:  271:    typedef allocator_traits<_Al> _ATraits;
        -:  272:    typedef pointer_traits<typename _ATraits::pointer> _PTraits;
        -:  273:
        -:  274:    _Al __a(__data_.second());
        -:  275:    __data_.second().~_Alloc();
        -:  276:    __a.deallocate(_PTraits::pointer_to(*this), 1);
        -:  277:}
        -:  278:
        -:  279:// This tag is used to instantiate an allocator type. The various shared_ptr control blocks
        -:  280:// detect that the allocator has been instantiated for this type and perform alternative
        -:  281:// initialization/destruction based on that.
        -:  282:struct __for_overwrite_tag {};
        -:  283:
        -:  284:template <class _Tp, class _Alloc>
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEED1Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEED0Ev called 0 returned 0% blocks executed 0%
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEED2Ev called 0 returned 0% blocks executed 0%
        -:  285:struct __shared_ptr_emplace
        -:  286:    : __shared_weak_count
        -:  287:{
        -:  288:    template<class ..._Args>
        -:  289:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEEC1B8ue170006IJEEES3_DpOT_ called 1 returned 100% blocks executed 100%
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEEC2B8ue170006IJEEES3_DpOT_ called 1 returned 100% blocks executed 50%
        2:  290:    explicit __shared_ptr_emplace(_Alloc __a, _Args&& ...__args)
        1:  291:        : __storage_(_VSTD::move(__a))
        1:  291-block  0
branch  0 taken 1
branch  1 taken 0
        2:  292:    {
        -:  293:#if _LIBCPP_STD_VER >= 20
        -:  294:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -:  295:            static_assert(sizeof...(_Args) == 0, "No argument should be provided to the control block when using _for_overwrite");
        -:  296:            ::new ((void*)__get_elem()) _Tp;
        -:  297:        } else {
        -:  298:            using _TpAlloc = typename __allocator_traits_rebind<_Alloc, _Tp>::type;
        -:  299:            _TpAlloc __tmp(*__get_alloc());
        -:  300:            allocator_traits<_TpAlloc>::construct(__tmp, __get_elem(), _VSTD::forward<_Args>(__args)...);
        -:  301:        }
        -:  302:#else
        1:  303:        ::new ((void*)__get_elem()) _Tp(_VSTD::forward<_Args>(__args)...);
        -:  304:#endif
        2:  305:    }
        1:  305-block  0
        1:  305-block  1
    $$$$$:  305-block  2
    $$$$$:  305-block  3
        -:  306:
        -:  307:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE11__get_allocB8ue170006Ev called 1 returned 100% blocks executed 100%
        1:  308:    _Alloc* __get_alloc() _NOEXCEPT { return __storage_.__get_alloc(); }
        1:  308-block  0
        -:  309:
        -:  310:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE10__get_elemB8ue170006Ev called 3 returned 100% blocks executed 100%
        3:  311:    _Tp* __get_elem() _NOEXCEPT { return __storage_.__get_elem(); }
        3:  311-block  0
        -:  312:
        -:  313:private:
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE16__on_zero_sharedEv called 1 returned 100% blocks executed 100%
        1:  314:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared() _NOEXCEPT override {
        -:  315:#if _LIBCPP_STD_VER >= 20
        -:  316:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -:  317:            __get_elem()->~_Tp();
        -:  318:        } else {
        -:  319:            using _TpAlloc = typename __allocator_traits_rebind<_Alloc, _Tp>::type;
        -:  320:            _TpAlloc __tmp(*__get_alloc());
        -:  321:            allocator_traits<_TpAlloc>::destroy(__tmp, __get_elem());
        -:  322:        }
        -:  323:#else
        1:  324:        __get_elem()->~_Tp();
        -:  325:#endif
        1:  326:    }
        1:  326-block  0
        -:  327:
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE21__on_zero_shared_weakEv called 1 returned 100% blocks executed 100%
        1:  328:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared_weak() _NOEXCEPT override {
        -:  329:        using _ControlBlockAlloc = typename __allocator_traits_rebind<_Alloc, __shared_ptr_emplace>::type;
        -:  330:        using _ControlBlockPointer = typename allocator_traits<_ControlBlockAlloc>::pointer;
        1:  331:        _ControlBlockAlloc __tmp(*__get_alloc());
        1:  332:        __storage_.~_Storage();
        1:  333:        allocator_traits<_ControlBlockAlloc>::deallocate(__tmp,
        1:  334:            pointer_traits<_ControlBlockPointer>::pointer_to(*this), 1);
        1:  335:    }
        1:  335-block  0
        -:  336:
        -:  337:    // This class implements the control block for non-array shared pointers created
        -:  338:    // through `std::allocate_shared` and `std::make_shared`.
        -:  339:    //
        -:  340:    // In previous versions of the library, we used a compressed pair to store
        -:  341:    // both the _Alloc and the _Tp. This implies using EBO, which is incompatible
        -:  342:    // with Allocator construction for _Tp. To allow implementing P0674 in C++20,
        -:  343:    // we now use a properly aligned char buffer while making sure that we maintain
        -:  344:    // the same layout that we had when we used a compressed pair.
        -:  345:    using _CompressedPair = __compressed_pair<_Alloc, _Tp>;
        -:  346:    struct _ALIGNAS_TYPE(_CompressedPair) _Storage {
        -:  347:        char __blob_[sizeof(_CompressedPair)];
        -:  348:
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_StorageC1B8ue170006EOS3_ called 1 returned 100% blocks executed 100%
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_StorageC2B8ue170006EOS3_ called 1 returned 100% blocks executed 100%
        2:  349:        _LIBCPP_HIDE_FROM_ABI explicit _Storage(_Alloc&& __a) {
        1:  350:            ::new ((void*)__get_alloc()) _Alloc(_VSTD::move(__a));
        2:  351:        }
        1:  351-block  0
        1:  351-block  1
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_StorageD1B8ue170006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_StorageD2B8ue170006Ev called 1 returned 100% blocks executed 100%
        2:  352:        _LIBCPP_HIDE_FROM_ABI ~_Storage() {
        1:  353:            __get_alloc()->~_Alloc();
        2:  354:        }
        1:  354-block  0
        1:  354-block  1
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_Storage11__get_allocB8ue170006Ev called 3 returned 100% blocks executed 100%
        3:  355:        _LIBCPP_HIDE_FROM_ABI _Alloc* __get_alloc() _NOEXCEPT {
        3:  356:            _CompressedPair *__as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
        3:  357:            typename _CompressedPair::_Base1* __first = _CompressedPair::__get_first_base(__as_pair);
        3:  358:            _Alloc *__alloc = reinterpret_cast<_Alloc*>(__first);
        3:  359:            return __alloc;
        3:  359-block  0
        -:  360:        }
function _ZNSt3__120__shared_ptr_emplaceI12ZooVetClinicNS_9allocatorIS1_EEE8_Storage10__get_elemB8ue170006Ev called 3 returned 100% blocks executed 100%
        3:  361:        _LIBCPP_HIDE_FROM_ABI _LIBCPP_NO_CFI _Tp* __get_elem() _NOEXCEPT {
        3:  362:            _CompressedPair *__as_pair = reinterpret_cast<_CompressedPair*>(__blob_);
        3:  363:            typename _CompressedPair::_Base2* __second = _CompressedPair::__get_second_base(__as_pair);
        3:  364:            _Tp *__elem = reinterpret_cast<_Tp*>(__second);
        3:  365:            return __elem;
        3:  365-block  0
        -:  366:        }
        -:  367:    };
        -:  368:
        -:  369:    static_assert(_LIBCPP_ALIGNOF(_Storage) == _LIBCPP_ALIGNOF(_CompressedPair), "");
        -:  370:    static_assert(sizeof(_Storage) == sizeof(_CompressedPair), "");
        -:  371:    _Storage __storage_;
        -:  372:};
        -:  373:
        -:  374:struct __shared_ptr_dummy_rebind_allocator_type;
        -:  375:template <>
        -:  376:class _LIBCPP_TEMPLATE_VIS allocator<__shared_ptr_dummy_rebind_allocator_type>
        -:  377:{
        -:  378:public:
        -:  379:    template <class _Other>
        -:  380:    struct rebind
        -:  381:    {
        -:  382:        typedef allocator<_Other> other;
        -:  383:    };
        -:  384:};
        -:  385:
        -:  386:template<class _Tp> class _LIBCPP_TEMPLATE_VIS enable_shared_from_this;
        -:  387:
        -:  388:// http://eel.is/c++draft/util.sharedptr#util.smartptr.shared.general-6
        -:  389:// A pointer type Y* is said to be compatible with a pointer type T*
        -:  390:// when either Y* is convertible to T* or Y is U[N] and T is cv U[].
        -:  391:#if _LIBCPP_STD_VER >= 17
        -:  392:template <class _Yp, class _Tp>
        -:  393:struct __bounded_convertible_to_unbounded : false_type {};
        -:  394:
        -:  395:template <class _Up, std::size_t _Np, class _Tp>
        -:  396:struct __bounded_convertible_to_unbounded<_Up[_Np], _Tp>
        -:  397:        : is_same<__remove_cv_t<_Tp>, _Up[]> {};
        -:  398:
        -:  399:template <class _Yp, class _Tp>
        -:  400:struct __compatible_with
        -:  401:    : _Or<
        -:  402:        is_convertible<_Yp*, _Tp*>,
        -:  403:        __bounded_convertible_to_unbounded<_Yp, _Tp>
        -:  404:    > {};
        -:  405:#else
        -:  406:template <class _Yp, class _Tp>
        -:  407:struct __compatible_with
        -:  408:    : is_convertible<_Yp*, _Tp*> {};
        -:  409:#endif // _LIBCPP_STD_VER >= 17
        -:  410:
        -:  411:// Constructors that take raw pointers have a different set of "compatible" constraints
        -:  412:// http://eel.is/c++draft/util.sharedptr#util.smartptr.shared.const-9.1
        -:  413:// - If T is an array type, then either T is U[N] and Y(*)[N] is convertible to T*,
        -:  414://   or T is U[] and Y(*)[] is convertible to T*.
        -:  415:// - If T is not an array type, then Y* is convertible to T*.
        -:  416:#if _LIBCPP_STD_VER >= 17
        -:  417:template <class _Yp, class _Tp, class = void>
        -:  418:struct __raw_pointer_compatible_with : _And<
        -:  419:        _Not<is_array<_Tp>>,
        -:  420:        is_convertible<_Yp*, _Tp*>
        -:  421:        > {};
        -:  422:
        -:  423:template <class _Yp, class _Up, std::size_t _Np>
        -:  424:struct __raw_pointer_compatible_with<_Yp, _Up[_Np], __enable_if_t<
        -:  425:            is_convertible<_Yp(*)[_Np], _Up(*)[_Np]>::value> >
        -:  426:        : true_type {};
        -:  427:
        -:  428:template <class _Yp, class _Up>
        -:  429:struct __raw_pointer_compatible_with<_Yp, _Up[], __enable_if_t<
        -:  430:            is_convertible<_Yp(*)[], _Up(*)[]>::value> >
        -:  431:        : true_type {};
        -:  432:
        -:  433:#else
        -:  434:template <class _Yp, class _Tp>
        -:  435:struct __raw_pointer_compatible_with
        -:  436:    : is_convertible<_Yp*, _Tp*> {};
        -:  437:#endif // _LIBCPP_STD_VER >= 17
        -:  438:
        -:  439:
        -:  440:template <class _Ptr, class = void>
        -:  441:struct __is_deletable : false_type { };
        -:  442:template <class _Ptr>
        -:  443:struct __is_deletable<_Ptr, decltype(delete std::declval<_Ptr>())> : true_type { };
        -:  444:
        -:  445:template <class _Ptr, class = void>
        -:  446:struct __is_array_deletable : false_type { };
        -:  447:template <class _Ptr>
        -:  448:struct __is_array_deletable<_Ptr, decltype(delete[] std::declval<_Ptr>())> : true_type { };
        -:  449:
        -:  450:template <class _Dp, class _Pt,
        -:  451:    class = decltype(std::declval<_Dp>()(std::declval<_Pt>()))>
        -:  452:true_type __well_formed_deleter_test(int);
        -:  453:
        -:  454:template <class, class>
        -:  455:false_type __well_formed_deleter_test(...);
        -:  456:
        -:  457:template <class _Dp, class _Pt>
        -:  458:struct __well_formed_deleter : decltype(std::__well_formed_deleter_test<_Dp, _Pt>(0)) {};
        -:  459:
        -:  460:template<class _Dp, class _Yp, class _Tp>
        -:  461:struct __shared_ptr_deleter_ctor_reqs
        -:  462:{
        -:  463:    static const bool value = __raw_pointer_compatible_with<_Yp, _Tp>::value &&
        -:  464:                              is_move_constructible<_Dp>::value &&
        -:  465:                              __well_formed_deleter<_Dp, _Yp*>::value;
        -:  466:};
        -:  467:
        -:  468:#if defined(_LIBCPP_ABI_ENABLE_SHARED_PTR_TRIVIAL_ABI)
        -:  469:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI __attribute__((__trivial_abi__))
        -:  470:#else
        -:  471:#  define _LIBCPP_SHARED_PTR_TRIVIAL_ABI
        -:  472:#endif
        -:  473:
        -:  474:template<class _Tp>
        -:  475:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS shared_ptr
        -:  476:{
        -:  477:public:
        -:  478:#if _LIBCPP_STD_VER >= 17
        -:  479:    typedef weak_ptr<_Tp> weak_type;
        -:  480:    typedef remove_extent_t<_Tp> element_type;
        -:  481:#else
        -:  482:    typedef _Tp element_type;
        -:  483:#endif
        -:  484:
        -:  485:private:
        -:  486:    element_type*      __ptr_;
        -:  487:    __shared_weak_count* __cntrl_;
        -:  488:
        -:  489:public:
        -:  490:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrI12ZooVetClinicEC1B8ue170006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrI12ZooVetClinicEC2B8ue170006Ev called 1 returned 100% blocks executed 100%
        2:  491:    _LIBCPP_CONSTEXPR shared_ptr() _NOEXCEPT
        1:  492:        : __ptr_(nullptr),
        1:  493:          __cntrl_(nullptr)
        2:  494:    { }
        1:  494-block  0
        1:  494-block  1
        -:  495:
        -:  496:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrI12ZooVetClinicEC1B8ue170006EDn called 0 returned 0% blocks executed 0%
function _ZNSt3__110shared_ptrI12ZooVetClinicEC2B8ue170006EDn called 0 returned 0% blocks executed 0%
    #####:  497:    _LIBCPP_CONSTEXPR shared_ptr(nullptr_t) _NOEXCEPT
    #####:  498:        : __ptr_(nullptr),
    #####:  499:          __cntrl_(nullptr)
    #####:  500:    { }
    $$$$$:  500-block  0
    $$$$$:  500-block  1
        -:  501:
        -:  502:    template<class _Yp, class = __enable_if_t<
        -:  503:        _And<
        -:  504:            __raw_pointer_compatible_with<_Yp, _Tp>
        -:  505:            // In C++03 we get errors when trying to do SFINAE with the
        -:  506:            // delete operator, so we always pretend that it's deletable.
        -:  507:            // The same happens on GCC.
        -:  508:#if !defined(_LIBCPP_CXX03_LANG) && !defined(_LIBCPP_COMPILER_GCC)
        -:  509:            , _If<is_array<_Tp>::value, __is_array_deletable<_Yp*>, __is_deletable<_Yp*> >
        -:  510:#endif
        -:  511:        >::value
        -:  512:    > >
        -:  513:    _LIBCPP_HIDE_FROM_ABI explicit shared_ptr(_Yp* __p) : __ptr_(__p) {
        -:  514:        unique_ptr<_Yp> __hold(__p);
        -:  515:        typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -:  516:        typedef __shared_ptr_pointer<_Yp*, __shared_ptr_default_delete<_Tp, _Yp>, _AllocT> _CntrlBlk;
        -:  517:        __cntrl_ = new _CntrlBlk(__p, __shared_ptr_default_delete<_Tp, _Yp>(), _AllocT());
        -:  518:        __hold.release();
        -:  519:        __enable_weak_this(__p, __p);
        -:  520:    }
        -:  521:
        -:  522:    template<class _Yp, class _Dp, class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
        -:  523:    _LIBCPP_HIDE_FROM_ABI
        -:  524:    shared_ptr(_Yp* __p, _Dp __d)
        -:  525:        : __ptr_(__p)
        -:  526:    {
        -:  527:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  528:        try
        -:  529:        {
        -:  530:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  531:            typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -:  532:            typedef __shared_ptr_pointer<_Yp*, _Dp, _AllocT> _CntrlBlk;
        -:  533:#ifndef _LIBCPP_CXX03_LANG
        -:  534:            __cntrl_ = new _CntrlBlk(__p, _VSTD::move(__d), _AllocT());
        -:  535:#else
        -:  536:            __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -:  537:#endif // not _LIBCPP_CXX03_LANG
        -:  538:            __enable_weak_this(__p, __p);
        -:  539:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  540:        }
        -:  541:        catch (...)
        -:  542:        {
        -:  543:            __d(__p);
        -:  544:            throw;
        -:  545:        }
        -:  546:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  547:    }
        -:  548:
        -:  549:    template<class _Yp, class _Dp, class _Alloc, class = __enable_if_t<__shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
        -:  550:    _LIBCPP_HIDE_FROM_ABI
        -:  551:    shared_ptr(_Yp* __p, _Dp __d, _Alloc __a)
        -:  552:        : __ptr_(__p)
        -:  553:    {
        -:  554:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  555:        try
        -:  556:        {
        -:  557:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  558:            typedef __shared_ptr_pointer<_Yp*, _Dp, _Alloc> _CntrlBlk;
        -:  559:            typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -:  560:            typedef __allocator_destructor<_A2> _D2;
        -:  561:            _A2 __a2(__a);
        -:  562:            unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -:  563:            ::new ((void*)_VSTD::addressof(*__hold2.get()))
        -:  564:#ifndef _LIBCPP_CXX03_LANG
        -:  565:                _CntrlBlk(__p, _VSTD::move(__d), __a);
        -:  566:#else
        -:  567:                _CntrlBlk(__p, __d, __a);
        -:  568:#endif // not _LIBCPP_CXX03_LANG
        -:  569:            __cntrl_ = _VSTD::addressof(*__hold2.release());
        -:  570:            __enable_weak_this(__p, __p);
        -:  571:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  572:        }
        -:  573:        catch (...)
        -:  574:        {
        -:  575:            __d(__p);
        -:  576:            throw;
        -:  577:        }
        -:  578:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  579:    }
        -:  580:
        -:  581:    template<class _Dp>
        -:  582:    _LIBCPP_HIDE_FROM_ABI
        -:  583:    shared_ptr(nullptr_t __p, _Dp __d)
        -:  584:        : __ptr_(nullptr)
        -:  585:    {
        -:  586:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  587:        try
        -:  588:        {
        -:  589:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  590:            typedef typename __shared_ptr_default_allocator<_Tp>::type _AllocT;
        -:  591:            typedef __shared_ptr_pointer<nullptr_t, _Dp, _AllocT> _CntrlBlk;
        -:  592:#ifndef _LIBCPP_CXX03_LANG
        -:  593:            __cntrl_ = new _CntrlBlk(__p, _VSTD::move(__d), _AllocT());
        -:  594:#else
        -:  595:            __cntrl_ = new _CntrlBlk(__p, __d, _AllocT());
        -:  596:#endif // not _LIBCPP_CXX03_LANG
        -:  597:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  598:        }
        -:  599:        catch (...)
        -:  600:        {
        -:  601:            __d(__p);
        -:  602:            throw;
        -:  603:        }
        -:  604:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  605:    }
        -:  606:
        -:  607:    template<class _Dp, class _Alloc>
        -:  608:    _LIBCPP_HIDE_FROM_ABI
        -:  609:    shared_ptr(nullptr_t __p, _Dp __d, _Alloc __a)
        -:  610:        : __ptr_(nullptr)
        -:  611:    {
        -:  612:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  613:        try
        -:  614:        {
        -:  615:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  616:            typedef __shared_ptr_pointer<nullptr_t, _Dp, _Alloc> _CntrlBlk;
        -:  617:            typedef typename __allocator_traits_rebind<_Alloc, _CntrlBlk>::type _A2;
        -:  618:            typedef __allocator_destructor<_A2> _D2;
        -:  619:            _A2 __a2(__a);
        -:  620:            unique_ptr<_CntrlBlk, _D2> __hold2(__a2.allocate(1), _D2(__a2, 1));
        -:  621:            ::new ((void*)_VSTD::addressof(*__hold2.get()))
        -:  622:#ifndef _LIBCPP_CXX03_LANG
        -:  623:                _CntrlBlk(__p, _VSTD::move(__d), __a);
        -:  624:#else
        -:  625:                _CntrlBlk(__p, __d, __a);
        -:  626:#endif // not _LIBCPP_CXX03_LANG
        -:  627:            __cntrl_ = _VSTD::addressof(*__hold2.release());
        -:  628:#ifndef _LIBCPP_HAS_NO_EXCEPTIONS
        -:  629:        }
        -:  630:        catch (...)
        -:  631:        {
        -:  632:            __d(__p);
        -:  633:            throw;
        -:  634:        }
        -:  635:#endif // _LIBCPP_HAS_NO_EXCEPTIONS
        -:  636:    }
        -:  637:
        -:  638:    template<class _Yp>
        -:  639:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrI12ZooVetClinicEC1B8ue170006IvEERKNS0_IT_EEPS1_ called 1 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrI12ZooVetClinicEC2B8ue170006IvEERKNS0_IT_EEPS1_ called 1 returned 100% blocks executed 100%
        2:  640:    shared_ptr(const shared_ptr<_Yp>& __r, element_type *__p) _NOEXCEPT
        1:  641:        : __ptr_(__p),
        1:  642:          __cntrl_(__r.__cntrl_)
        1:  643:    {
        1:  644:        if (__cntrl_)
        1:  644-block  0
branch  0 taken 1
branch  1 taken 0
        1:  645:            __cntrl_->__add_shared();
        1:  645-block  0
        2:  646:    }
        1:  646-block  0
        1:  646-block  1
        -:  647:
        -:  648:// LWG-2996
        -:  649:// We don't backport because it is an evolutionary change.
        -:  650:#if _LIBCPP_STD_VER >= 20
        -:  651:    template <class _Yp>
        -:  652:    _LIBCPP_HIDE_FROM_ABI shared_ptr(shared_ptr<_Yp>&& __r, element_type* __p) noexcept
        -:  653:        : __ptr_(__p),
        -:  654:          __cntrl_(__r.__cntrl_) {
        -:  655:      __r.__ptr_   = nullptr;
        -:  656:      __r.__cntrl_ = nullptr;
        -:  657:    }
        -:  658:#endif
        -:  659:
        -:  660:    _LIBCPP_HIDE_FROM_ABI
        -:  661:    shared_ptr(const shared_ptr& __r) _NOEXCEPT
        -:  662:        : __ptr_(__r.__ptr_),
        -:  663:          __cntrl_(__r.__cntrl_)
        -:  664:    {
        -:  665:        if (__cntrl_)
        -:  666:            __cntrl_->__add_shared();
        -:  667:    }
        -:  668:
        -:  669:    template<class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
        -:  670:    _LIBCPP_HIDE_FROM_ABI
        -:  671:    shared_ptr(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -:  672:        : __ptr_(__r.__ptr_),
        -:  673:          __cntrl_(__r.__cntrl_)
        -:  674:    {
        -:  675:        if (__cntrl_)
        -:  676:            __cntrl_->__add_shared();
        -:  677:    }
        -:  678:
        -:  679:    _LIBCPP_HIDE_FROM_ABI
        -:  680:    shared_ptr(shared_ptr&& __r) _NOEXCEPT
        -:  681:        : __ptr_(__r.__ptr_),
        -:  682:          __cntrl_(__r.__cntrl_)
        -:  683:    {
        -:  684:        __r.__ptr_ = nullptr;
        -:  685:        __r.__cntrl_ = nullptr;
        -:  686:    }
        -:  687:
        -:  688:    template<class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
        -:  689:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrIvEC1B8ue170006I12ZooVetClinicvEEONS0_IT_EE called 1 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrIvEC2B8ue170006I12ZooVetClinicvEEONS0_IT_EE called 1 returned 100% blocks executed 100%
        2:  690:    shared_ptr(shared_ptr<_Yp>&& __r) _NOEXCEPT
        1:  691:        : __ptr_(__r.__ptr_),
        1:  692:          __cntrl_(__r.__cntrl_)
        1:  693:    {
        1:  694:        __r.__ptr_ = nullptr;
        1:  695:        __r.__cntrl_ = nullptr;
        2:  696:    }
        1:  696-block  0
        1:  696-block  1
        -:  697:
        -:  698:    template<class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
        -:  699:    _LIBCPP_HIDE_FROM_ABI
        -:  700:    explicit shared_ptr(const weak_ptr<_Yp>& __r)
        -:  701:        : __ptr_(__r.__ptr_),
        -:  702:          __cntrl_(__r.__cntrl_ ? __r.__cntrl_->lock() : __r.__cntrl_)
        -:  703:    {
        -:  704:        if (__cntrl_ == nullptr)
        -:  705:            __throw_bad_weak_ptr();
        -:  706:    }
        -:  707:
        -:  708:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -:  709:    template<class _Yp, class = __enable_if_t<is_convertible<_Yp*, element_type*>::value> >
        -:  710:    _LIBCPP_HIDE_FROM_ABI
        -:  711:    shared_ptr(auto_ptr<_Yp>&& __r)
        -:  712:        : __ptr_(__r.get())
        -:  713:    {
        -:  714:        typedef __shared_ptr_pointer<_Yp*, default_delete<_Yp>, allocator<_Yp> > _CntrlBlk;
        -:  715:        __cntrl_ = new _CntrlBlk(__r.get(), default_delete<_Yp>(), allocator<_Yp>());
        -:  716:        __enable_weak_this(__r.get(), __r.get());
        -:  717:        __r.release();
        -:  718:    }
        -:  719:#endif
        -:  720:
        -:  721:    template <class _Yp, class _Dp, class = __enable_if_t<
        -:  722:        !is_lvalue_reference<_Dp>::value &&
        -:  723:         __compatible_with<_Yp, _Tp>::value &&
        -:  724:         is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value
        -:  725:    > >
        -:  726:    _LIBCPP_HIDE_FROM_ABI
        -:  727:    shared_ptr(unique_ptr<_Yp, _Dp>&& __r)
        -:  728:        : __ptr_(__r.get())
        -:  729:    {
        -:  730:#if _LIBCPP_STD_VER >= 14
        -:  731:        if (__ptr_ == nullptr)
        -:  732:            __cntrl_ = nullptr;
        -:  733:        else
        -:  734:#endif
        -:  735:        {
        -:  736:            typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -:  737:            typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer, _Dp, _AllocT> _CntrlBlk;
        -:  738:            __cntrl_ = new _CntrlBlk(__r.get(), std::move(__r.get_deleter()), _AllocT());
        -:  739:            __enable_weak_this(__r.get(), __r.get());
        -:  740:        }
        -:  741:        __r.release();
        -:  742:    }
        -:  743:
        -:  744:    template <class _Yp, class _Dp, class = void, class = __enable_if_t<
        -:  745:        is_lvalue_reference<_Dp>::value &&
        -:  746:         __compatible_with<_Yp, _Tp>::value &&
        -:  747:        is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>::value
        -:  748:    > >
        -:  749:    _LIBCPP_HIDE_FROM_ABI
        -:  750:    shared_ptr(unique_ptr<_Yp, _Dp>&& __r)
        -:  751:        : __ptr_(__r.get())
        -:  752:    {
        -:  753:#if _LIBCPP_STD_VER >= 14
        -:  754:        if (__ptr_ == nullptr)
        -:  755:            __cntrl_ = nullptr;
        -:  756:        else
        -:  757:#endif
        -:  758:        {
        -:  759:            typedef typename __shared_ptr_default_allocator<_Yp>::type _AllocT;
        -:  760:            typedef __shared_ptr_pointer<typename unique_ptr<_Yp, _Dp>::pointer,
        -:  761:                                        reference_wrapper<__libcpp_remove_reference_t<_Dp> >,
        -:  762:                                        _AllocT> _CntrlBlk;
        -:  763:            __cntrl_ = new _CntrlBlk(__r.get(), _VSTD::ref(__r.get_deleter()), _AllocT());
        -:  764:            __enable_weak_this(__r.get(), __r.get());
        -:  765:        }
        -:  766:        __r.release();
        -:  767:    }
        -:  768:
        -:  769:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrI12ZooVetClinicED1B8ue170006Ev called 2 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrIvED1B8ue170006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrIvED2B8ue170006Ev called 1 returned 100% blocks executed 100%
function _ZNSt3__110shared_ptrI12ZooVetClinicED2B8ue170006Ev called 2 returned 100% blocks executed 100%
        6:  770:    ~shared_ptr()
        3:  771:    {
        3:  772:        if (__cntrl_)
        1:  772-block  0
branch  0 taken 1
branch  1 taken 0
        2:  772-block  1
branch  2 taken 1
branch  3 taken 1
        2:  773:            __cntrl_->__release_shared();
        1:  773-block  0
        1:  773-block  1
        6:  774:    }
        2:  774-block  0
        1:  774-block  1
        1:  774-block  2
        2:  774-block  3
        -:  775:
        -:  776:    _LIBCPP_HIDE_FROM_ABI
        -:  777:    shared_ptr<_Tp>& operator=(const shared_ptr& __r) _NOEXCEPT
        -:  778:    {
        -:  779:        shared_ptr(__r).swap(*this);
        -:  780:        return *this;
        -:  781:    }
        -:  782:
        -:  783:    template<class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
        -:  784:    _LIBCPP_HIDE_FROM_ABI
        -:  785:    shared_ptr<_Tp>& operator=(const shared_ptr<_Yp>& __r) _NOEXCEPT
        -:  786:    {
        -:  787:        shared_ptr(__r).swap(*this);
        -:  788:        return *this;
        -:  789:    }
        -:  790:
        -:  791:    _LIBCPP_HIDE_FROM_ABI
        -:  792:    shared_ptr<_Tp>& operator=(shared_ptr&& __r) _NOEXCEPT
        -:  793:    {
        -:  794:        shared_ptr(_VSTD::move(__r)).swap(*this);
        -:  795:        return *this;
        -:  796:    }
        -:  797:
        -:  798:    template<class _Yp, class = __enable_if_t<__compatible_with<_Yp, _Tp>::value> >
        -:  799:    _LIBCPP_HIDE_FROM_ABI
        -:  800:    shared_ptr<_Tp>& operator=(shared_ptr<_Yp>&& __r)
        -:  801:    {
        -:  802:        shared_ptr(_VSTD::move(__r)).swap(*this);
        -:  803:        return *this;
        -:  804:    }
        -:  805:
        -:  806:#if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_AUTO_PTR)
        -:  807:    template<class _Yp, class = __enable_if_t<
        -:  808:        !is_array<_Yp>::value &&
        -:  809:        is_convertible<_Yp*, typename shared_ptr<_Tp>::element_type*>::value
        -:  810:    > >
        -:  811:    _LIBCPP_HIDE_FROM_ABI
        -:  812:    shared_ptr<_Tp>& operator=(auto_ptr<_Yp>&& __r)
        -:  813:    {
        -:  814:        shared_ptr(_VSTD::move(__r)).swap(*this);
        -:  815:        return *this;
        -:  816:    }
        -:  817:#endif
        -:  818:
        -:  819:    template <class _Yp, class _Dp, class = __enable_if_t<_And<
        -:  820:        __compatible_with<_Yp, _Tp>,
        -:  821:        is_convertible<typename unique_ptr<_Yp, _Dp>::pointer, element_type*>
        -:  822:    >::value> >
        -:  823:    _LIBCPP_HIDE_FROM_ABI
        -:  824:    shared_ptr<_Tp>& operator=(unique_ptr<_Yp, _Dp>&& __r)
        -:  825:    {
        -:  826:        shared_ptr(_VSTD::move(__r)).swap(*this);
        -:  827:        return *this;
        -:  828:    }
        -:  829:
        -:  830:    _LIBCPP_HIDE_FROM_ABI
        -:  831:    void swap(shared_ptr& __r) _NOEXCEPT
        -:  832:    {
        -:  833:        _VSTD::swap(__ptr_, __r.__ptr_);
        -:  834:        _VSTD::swap(__cntrl_, __r.__cntrl_);
        -:  835:    }
        -:  836:
        -:  837:    _LIBCPP_HIDE_FROM_ABI
        -:  838:    void reset() _NOEXCEPT
        -:  839:    {
        -:  840:        shared_ptr().swap(*this);
        -:  841:    }
        -:  842:
        -:  843:    template<class _Yp, class = __enable_if_t<
        -:  844:        __raw_pointer_compatible_with<_Yp, _Tp>::value
        -:  845:    > >
        -:  846:    _LIBCPP_HIDE_FROM_ABI
        -:  847:    void reset(_Yp* __p)
        -:  848:    {
        -:  849:        shared_ptr(__p).swap(*this);
        -:  850:    }
        -:  851:
        -:  852:    template<class _Yp, class _Dp, class = __enable_if_t<
        -:  853:        __shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
        -:  854:    _LIBCPP_HIDE_FROM_ABI
        -:  855:    void reset(_Yp* __p, _Dp __d)
        -:  856:    {
        -:  857:        shared_ptr(__p, __d).swap(*this);
        -:  858:    }
        -:  859:
        -:  860:    template<class _Yp, class _Dp, class _Alloc, class = __enable_if_t<
        -:  861:        __shared_ptr_deleter_ctor_reqs<_Dp, _Yp, _Tp>::value> >
        -:  862:    _LIBCPP_HIDE_FROM_ABI
        -:  863:    void reset(_Yp* __p, _Dp __d, _Alloc __a)
        -:  864:    {
        -:  865:        shared_ptr(__p, __d, __a).swap(*this);
        -:  866:    }
        -:  867:
        -:  868:    _LIBCPP_HIDE_FROM_ABI
function _ZNKSt3__110shared_ptrIvE3getB8ue170006Ev called 1 returned 100% blocks executed 100%
        1:  869:    element_type* get() const _NOEXCEPT
        -:  870:    {
        1:  871:        return __ptr_;
        1:  871-block  0
        -:  872:    }
        -:  873:
        -:  874:    _LIBCPP_HIDE_FROM_ABI
function _ZNKSt3__110shared_ptrI12ZooVetClinicEdeB8ue170006Ev called 1 returned 100% blocks executed 100%
        1:  875:    __add_lvalue_reference_t<element_type> operator*() const _NOEXCEPT
        -:  876:    {
        1:  877:        return *__ptr_;
        1:  877-block  0
        -:  878:    }
        -:  879:
        -:  880:    _LIBCPP_HIDE_FROM_ABI
        -:  881:    element_type* operator->() const _NOEXCEPT
        -:  882:    {
        -:  883:        static_assert(!is_array<_Tp>::value,
        -:  884:                      "std::shared_ptr<T>::operator-> is only valid when T is not an array type.");
        -:  885:        return __ptr_;
        -:  886:    }
        -:  887:
        -:  888:    _LIBCPP_HIDE_FROM_ABI
        -:  889:    long use_count() const _NOEXCEPT
        -:  890:    {
        -:  891:        return __cntrl_ ? __cntrl_->use_count() : 0;
        -:  892:    }
        -:  893:
        -:  894:    _LIBCPP_HIDE_FROM_ABI
        -:  895:    bool unique() const _NOEXCEPT
        -:  896:    {
        -:  897:        return use_count() == 1;
        -:  898:    }
        -:  899:
        -:  900:    _LIBCPP_HIDE_FROM_ABI
        -:  901:    explicit operator bool() const _NOEXCEPT
        -:  902:    {
        -:  903:        return get() != nullptr;
        -:  904:    }
        -:  905:
        -:  906:    template <class _Up>
        -:  907:    _LIBCPP_HIDE_FROM_ABI
        -:  908:    bool owner_before(shared_ptr<_Up> const& __p) const _NOEXCEPT
        -:  909:    {
        -:  910:        return __cntrl_ < __p.__cntrl_;
        -:  911:    }
        -:  912:
        -:  913:    template <class _Up>
        -:  914:    _LIBCPP_HIDE_FROM_ABI
        -:  915:    bool owner_before(weak_ptr<_Up> const& __p) const _NOEXCEPT
        -:  916:    {
        -:  917:        return __cntrl_ < __p.__cntrl_;
        -:  918:    }
        -:  919:
        -:  920:    _LIBCPP_HIDE_FROM_ABI
        -:  921:    bool __owner_equivalent(const shared_ptr& __p) const
        -:  922:    {
        -:  923:        return __cntrl_ == __p.__cntrl_;
        -:  924:    }
        -:  925:
        -:  926:#if _LIBCPP_STD_VER >= 17
        -:  927:    _LIBCPP_HIDE_FROM_ABI
        -:  928:    __add_lvalue_reference_t<element_type> operator[](ptrdiff_t __i) const
        -:  929:    {
        -:  930:            static_assert(is_array<_Tp>::value,
        -:  931:                          "std::shared_ptr<T>::operator[] is only valid when T is an array type.");
        -:  932:            return __ptr_[__i];
        -:  933:    }
        -:  934:#endif
        -:  935:
        -:  936:#ifndef _LIBCPP_HAS_NO_RTTI
        -:  937:    template <class _Dp>
        -:  938:    _LIBCPP_HIDE_FROM_ABI
        -:  939:    _Dp* __get_deleter() const _NOEXCEPT
        -:  940:    {
        -:  941:        return static_cast<_Dp*>(__cntrl_
        -:  942:                    ? const_cast<void *>(__cntrl_->__get_deleter(typeid(_Dp)))
        -:  943:                      : nullptr);
        -:  944:    }
        -:  945:#endif // _LIBCPP_HAS_NO_RTTI
        -:  946:
        -:  947:    template<class _Yp, class _CntrlBlk>
        -:  948:    _LIBCPP_HIDE_FROM_ABI
function _ZNSt3__110shared_ptrI12ZooVetClinicE27__create_with_control_blockB8ue170006IS1_NS_20__shared_ptr_emplaceIS1_NS_9allocatorIS1_EEEEEES2_PT_PT0_ called 1 returned 100% blocks executed 66%
        1:  949:    static shared_ptr<_Tp> __create_with_control_block(_Yp* __p, _CntrlBlk* __cntrl) _NOEXCEPT
        -:  950:    {
        1:  951:        shared_ptr<_Tp> __r;
        1:  952:        __r.__ptr_ = __p;
        1:  953:        __r.__cntrl_ = __cntrl;
        1:  954:        __r.__enable_weak_this(__r.__ptr_, __r.__ptr_);
        1:  955:        return __r;
        1:  956:    }
        1:  956-block  0
branch  0 taken 1
branch  1 taken 0
    $$$$$:  956-block  1
        1:  956-block  2
        -:  957:
        -:  958:private:
        -:  959:    template <class _Yp, bool = is_function<_Yp>::value>
        -:  960:    struct __shared_ptr_default_allocator
        -:  961:    {
        -:  962:        typedef allocator<_Yp> type;
        -:  963:    };
        -:  964:
        -:  965:    template <class _Yp>
        -:  966:    struct __shared_ptr_default_allocator<_Yp, true>
        -:  967:    {
        -:  968:        typedef allocator<__shared_ptr_dummy_rebind_allocator_type> type;
        -:  969:    };
        -:  970:
        -:  971:    template <class _Yp, class _OrigPtr, class = __enable_if_t<
        -:  972:        is_convertible<_OrigPtr*, const enable_shared_from_this<_Yp>*>::value
        -:  973:    > >
        -:  974:    _LIBCPP_HIDE_FROM_ABI
        -:  975:    void __enable_weak_this(const enable_shared_from_this<_Yp>* __e, _OrigPtr* __ptr) _NOEXCEPT
        -:  976:    {
        -:  977:        typedef __remove_cv_t<_Yp> _RawYp;
        -:  978:        if (__e && __e->__weak_this_.expired())
        -:  979:        {
        -:  980:            __e->__weak_this_ = shared_ptr<_RawYp>(*this,
        -:  981:                const_cast<_RawYp*>(static_cast<const _Yp*>(__ptr)));
        -:  982:        }
        -:  983:    }
        -:  984:
function _ZNSt3__110shared_ptrI12ZooVetClinicE18__enable_weak_thisB8ue170006Ez called 1 returned 100% blocks executed 100%
        1:  985:    _LIBCPP_HIDE_FROM_ABI void __enable_weak_this(...) _NOEXCEPT { }
        1:  985-block  0
        -:  986:
        -:  987:    template <class, class _Yp>
        -:  988:    struct __shared_ptr_default_delete
        -:  989:        : default_delete<_Yp>
        -:  990:    { };
        -:  991:
        -:  992:    template <class _Yp, class _Un, size_t _Sz>
        -:  993:    struct __shared_ptr_default_delete<_Yp[_Sz], _Un>
        -:  994:        : default_delete<_Yp[]>
        -:  995:    { };
        -:  996:
        -:  997:    template <class _Yp, class _Un>
        -:  998:    struct __shared_ptr_default_delete<_Yp[], _Un>
        -:  999:        : default_delete<_Yp[]>
        -: 1000:    { };
        -: 1001:
        -: 1002:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 1003:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 1004:};
        -: 1005:
        -: 1006:#if _LIBCPP_STD_VER >= 17
        -: 1007:template<class _Tp>
        -: 1008:shared_ptr(weak_ptr<_Tp>) -> shared_ptr<_Tp>;
        -: 1009:template<class _Tp, class _Dp>
        -: 1010:shared_ptr(unique_ptr<_Tp, _Dp>) -> shared_ptr<_Tp>;
        -: 1011:#endif
        -: 1012:
        -: 1013://
        -: 1014:// std::allocate_shared and std::make_shared
        -: 1015://
        -: 1016:template<class _Tp, class _Alloc, class ..._Args, class = __enable_if_t<!is_array<_Tp>::value> >
        -: 1017:_LIBCPP_HIDE_FROM_ABI
function _ZNSt3__115allocate_sharedB8ue170006I12ZooVetClinicNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_ called 1 returned 100% blocks executed 50%
        1: 1018:shared_ptr<_Tp> allocate_shared(const _Alloc& __a, _Args&& ...__args)
        -: 1019:{
        -: 1020:    using _ControlBlock = __shared_ptr_emplace<_Tp, _Alloc>;
        -: 1021:    using _ControlBlockAllocator = typename __allocator_traits_rebind<_Alloc, _ControlBlock>::type;
        1: 1022:    __allocation_guard<_ControlBlockAllocator> __guard(__a, 1);
        1: 1023:    ::new ((void*)_VSTD::addressof(*__guard.__get())) _ControlBlock(__a, _VSTD::forward<_Args>(__args)...);
        1: 1023-block  0
branch  0 taken 1
branch  1 taken 0
        1: 1024:    auto __control_block = __guard.__release_ptr();
        1: 1025:    return shared_ptr<_Tp>::__create_with_control_block((*__control_block).__get_elem(), _VSTD::addressof(*__control_block));
        1: 1026:}
        1: 1026-block  0
    $$$$$: 1026-block  1
    $$$$$: 1026-block  2
        -: 1027:
        -: 1028:template<class _Tp, class ..._Args, class = __enable_if_t<!is_array<_Tp>::value> >
        -: 1029:_LIBCPP_HIDE_FROM_ABI
function _ZNSt3__111make_sharedB8ue170006I12ZooVetClinicJEvEENS_10shared_ptrIT_EEDpOT0_ called 1 returned 100% blocks executed 100%
        1: 1030:shared_ptr<_Tp> make_shared(_Args&& ...__args)
        -: 1031:{
        1: 1032:    return _VSTD::allocate_shared<_Tp>(allocator<_Tp>(), _VSTD::forward<_Args>(__args)...);
        1: 1032-block  0
        -: 1033:}
        -: 1034:
        -: 1035:#if _LIBCPP_STD_VER >= 20
        -: 1036:
        -: 1037:template<class _Tp, class _Alloc, __enable_if_t<!is_array<_Tp>::value, int> = 0>
        -: 1038:_LIBCPP_HIDE_FROM_ABI
        -: 1039:shared_ptr<_Tp> allocate_shared_for_overwrite(const _Alloc& __a)
        -: 1040:{
        -: 1041:    using _ForOverwriteAllocator = __allocator_traits_rebind_t<_Alloc, __for_overwrite_tag>;
        -: 1042:    _ForOverwriteAllocator __alloc(__a);
        -: 1043:    return std::allocate_shared<_Tp>(__alloc);
        -: 1044:}
        -: 1045:
        -: 1046:template<class _Tp, __enable_if_t<!is_array<_Tp>::value, int> = 0>
        -: 1047:_LIBCPP_HIDE_FROM_ABI
        -: 1048:shared_ptr<_Tp> make_shared_for_overwrite()
        -: 1049:{
        -: 1050:    return std::allocate_shared_for_overwrite<_Tp>(allocator<_Tp>());
        -: 1051:}
        -: 1052:
        -: 1053:#endif // _LIBCPP_STD_VER >= 20
        -: 1054:
        -: 1055:#if _LIBCPP_STD_VER >= 17
        -: 1056:
        -: 1057:template <size_t _Alignment>
        -: 1058:struct __sp_aligned_storage {
        -: 1059:    alignas(_Alignment) char __storage[_Alignment];
        -: 1060:};
        -: 1061:
        -: 1062:template <class _Tp, class _Alloc>
        -: 1063:struct __unbounded_array_control_block;
        -: 1064:
        -: 1065:template <class _Tp, class _Alloc>
        -: 1066:struct __unbounded_array_control_block<_Tp[], _Alloc> : __shared_weak_count
        -: 1067:{
        -: 1068:    _LIBCPP_HIDE_FROM_ABI constexpr
        -: 1069:    _Tp* __get_data() noexcept { return __data_; }
        -: 1070:
        -: 1071:    _LIBCPP_HIDE_FROM_ABI
        -: 1072:    explicit __unbounded_array_control_block(_Alloc const& __alloc, size_t __count, _Tp const& __arg)
        -: 1073:        : __alloc_(__alloc), __count_(__count)
        -: 1074:    {
        -: 1075:        std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::begin(__data_), __count_, __arg);
        -: 1076:    }
        -: 1077:
        -: 1078:    _LIBCPP_HIDE_FROM_ABI
        -: 1079:    explicit __unbounded_array_control_block(_Alloc const& __alloc, size_t __count)
        -: 1080:        : __alloc_(__alloc), __count_(__count)
        -: 1081:    {
        -: 1082:#if _LIBCPP_STD_VER >= 20
        -: 1083:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -: 1084:            // We are purposefully not using an allocator-aware default construction because the spec says so.
        -: 1085:            // There's currently no way of expressing default initialization in an allocator-aware manner anyway.
        -: 1086:            std::uninitialized_default_construct_n(std::begin(__data_), __count_);
        -: 1087:        } else {
        -: 1088:            std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::begin(__data_), __count_);
        -: 1089:        }
        -: 1090:#else
        -: 1091:        std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::begin(__data_), __count_);
        -: 1092:#endif
        -: 1093:    }
        -: 1094:
        -: 1095:    // Returns the number of bytes required to store a control block followed by the given number
        -: 1096:    // of elements of _Tp, with the whole storage being aligned to a multiple of _Tp's alignment.
        -: 1097:    _LIBCPP_HIDE_FROM_ABI
        -: 1098:    static constexpr size_t __bytes_for(size_t __elements) {
        -: 1099:        // When there's 0 elements, the control block alone is enough since it holds one element.
        -: 1100:        // Otherwise, we allocate one fewer element than requested because the control block already
        -: 1101:        // holds one. Also, we use the bitwise formula below to ensure that we allocate enough bytes
        -: 1102:        // for the whole allocation to be a multiple of _Tp's alignment. That formula is taken from [1].
        -: 1103:        //
        -: 1104:        // [1]: https://en.wikipedia.org/wiki/Data_structure_alignment#Computing_padding
        -: 1105:        size_t __bytes = __elements == 0 ? sizeof(__unbounded_array_control_block)
        -: 1106:                                         : (__elements - 1) * sizeof(_Tp) + sizeof(__unbounded_array_control_block);
        -: 1107:        constexpr size_t __align = alignof(_Tp);
        -: 1108:        return (__bytes + __align - 1) & ~(__align - 1);
        -: 1109:    }
        -: 1110:
        -: 1111:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL
        -: 1112:    ~__unbounded_array_control_block() override { } // can't be `= default` because of the sometimes-non-trivial union member __data_
        -: 1113:
        -: 1114:private:
        -: 1115:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared() _NOEXCEPT override {
        -: 1116:#if _LIBCPP_STD_VER >= 20
        -: 1117:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -: 1118:            std::__reverse_destroy(__data_, __data_ + __count_);
        -: 1119:        } else {
        -: 1120:            __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
        -: 1121:            std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + __count_);
        -: 1122:        }
        -: 1123:#else
        -: 1124:        __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
        -: 1125:        std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + __count_);
        -: 1126:#endif
        -: 1127:    }
        -: 1128:
        -: 1129:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared_weak() _NOEXCEPT override {
        -: 1130:        using _AlignedStorage = __sp_aligned_storage<alignof(__unbounded_array_control_block)>;
        -: 1131:        using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
        -: 1132:        using _PointerTraits = pointer_traits<typename allocator_traits<_StorageAlloc>::pointer>;
        -: 1133:
        -: 1134:        _StorageAlloc __tmp(__alloc_);
        -: 1135:        __alloc_.~_Alloc();
        -: 1136:        size_t __size = __unbounded_array_control_block::__bytes_for(__count_);
        -: 1137:        _AlignedStorage* __storage = reinterpret_cast<_AlignedStorage*>(this);
        -: 1138:        allocator_traits<_StorageAlloc>::deallocate(
        -: 1139:            __tmp, _PointerTraits::pointer_to(*__storage), __size / sizeof(_AlignedStorage));
        -: 1140:    }
        -: 1141:
        -: 1142:    _LIBCPP_NO_UNIQUE_ADDRESS _Alloc __alloc_;
        -: 1143:    size_t __count_;
        -: 1144:    union {
        -: 1145:        _Tp __data_[1];
        -: 1146:    };
        -: 1147:};
        -: 1148:
        -: 1149:template<class _Array, class _Alloc, class... _Arg>
        -: 1150:_LIBCPP_HIDE_FROM_ABI
        -: 1151:shared_ptr<_Array> __allocate_shared_unbounded_array(const _Alloc& __a, size_t __n, _Arg&& ...__arg)
        -: 1152:{
        -: 1153:    static_assert(__libcpp_is_unbounded_array<_Array>::value);
        -: 1154:    // We compute the number of bytes necessary to hold the control block and the
        -: 1155:    // array elements. Then, we allocate an array of properly-aligned dummy structs
        -: 1156:    // large enough to hold the control block and array. This allows shifting the
        -: 1157:    // burden of aligning memory properly from us to the allocator.
        -: 1158:    using _ControlBlock = __unbounded_array_control_block<_Array, _Alloc>;
        -: 1159:    using _AlignedStorage = __sp_aligned_storage<alignof(_ControlBlock)>;
        -: 1160:    using _StorageAlloc = __allocator_traits_rebind_t<_Alloc, _AlignedStorage>;
        -: 1161:    __allocation_guard<_StorageAlloc> __guard(__a, _ControlBlock::__bytes_for(__n) / sizeof(_AlignedStorage));
        -: 1162:    _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
        -: 1163:    std::__construct_at(__control_block, __a, __n, std::forward<_Arg>(__arg)...);
        -: 1164:    __guard.__release_ptr();
        -: 1165:    return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
        -: 1166:}
        -: 1167:
        -: 1168:template <class _Tp, class _Alloc>
        -: 1169:struct __bounded_array_control_block;
        -: 1170:
        -: 1171:template <class _Tp, size_t _Count, class _Alloc>
        -: 1172:struct __bounded_array_control_block<_Tp[_Count], _Alloc>
        -: 1173:    : __shared_weak_count
        -: 1174:{
        -: 1175:    _LIBCPP_HIDE_FROM_ABI constexpr
        -: 1176:    _Tp* __get_data() noexcept { return __data_; }
        -: 1177:
        -: 1178:    _LIBCPP_HIDE_FROM_ABI
        -: 1179:    explicit __bounded_array_control_block(_Alloc const& __alloc, _Tp const& __arg) : __alloc_(__alloc) {
        -: 1180:        std::__uninitialized_allocator_fill_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count, __arg);
        -: 1181:    }
        -: 1182:
        -: 1183:    _LIBCPP_HIDE_FROM_ABI
        -: 1184:    explicit __bounded_array_control_block(_Alloc const& __alloc) : __alloc_(__alloc) {
        -: 1185:#if _LIBCPP_STD_VER >= 20
        -: 1186:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -: 1187:            // We are purposefully not using an allocator-aware default construction because the spec says so.
        -: 1188:            // There's currently no way of expressing default initialization in an allocator-aware manner anyway.
        -: 1189:            std::uninitialized_default_construct_n(std::addressof(__data_[0]), _Count);
        -: 1190:        } else {
        -: 1191:            std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count);
        -: 1192:        }
        -: 1193:#else
        -: 1194:        std::__uninitialized_allocator_value_construct_n_multidimensional(__alloc_, std::addressof(__data_[0]), _Count);
        -: 1195:#endif
        -: 1196:    }
        -: 1197:
        -: 1198:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL
        -: 1199:    ~__bounded_array_control_block() override { } // can't be `= default` because of the sometimes-non-trivial union member __data_
        -: 1200:
        -: 1201:private:
        -: 1202:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared() _NOEXCEPT override {
        -: 1203:#if _LIBCPP_STD_VER >= 20
        -: 1204:        if constexpr (is_same_v<typename _Alloc::value_type, __for_overwrite_tag>) {
        -: 1205:            std::__reverse_destroy(__data_, __data_ + _Count);
        -: 1206:        } else {
        -: 1207:            __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
        -: 1208:            std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + _Count);
        -: 1209:        }
        -: 1210:#else
        -: 1211:        __allocator_traits_rebind_t<_Alloc, _Tp> __value_alloc(__alloc_);
        -: 1212:        std::__allocator_destroy_multidimensional(__value_alloc, __data_, __data_ + _Count);
        -: 1213:#endif
        -: 1214:    }
        -: 1215:
        -: 1216:    _LIBCPP_HIDE_FROM_ABI_VIRTUAL void __on_zero_shared_weak() _NOEXCEPT override {
        -: 1217:        using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, __bounded_array_control_block>;
        -: 1218:        using _PointerTraits = pointer_traits<typename allocator_traits<_ControlBlockAlloc>::pointer>;
        -: 1219:
        -: 1220:        _ControlBlockAlloc __tmp(__alloc_);
        -: 1221:        __alloc_.~_Alloc();
        -: 1222:        allocator_traits<_ControlBlockAlloc>::deallocate(__tmp, _PointerTraits::pointer_to(*this), 1);
        -: 1223:    }
        -: 1224:
        -: 1225:    _LIBCPP_NO_UNIQUE_ADDRESS _Alloc __alloc_;
        -: 1226:    union {
        -: 1227:        _Tp __data_[_Count];
        -: 1228:    };
        -: 1229:};
        -: 1230:
        -: 1231:template<class _Array, class _Alloc, class... _Arg>
        -: 1232:_LIBCPP_HIDE_FROM_ABI
        -: 1233:shared_ptr<_Array> __allocate_shared_bounded_array(const _Alloc& __a, _Arg&& ...__arg)
        -: 1234:{
        -: 1235:    static_assert(__libcpp_is_bounded_array<_Array>::value);
        -: 1236:    using _ControlBlock = __bounded_array_control_block<_Array, _Alloc>;
        -: 1237:    using _ControlBlockAlloc = __allocator_traits_rebind_t<_Alloc, _ControlBlock>;
        -: 1238:
        -: 1239:    __allocation_guard<_ControlBlockAlloc> __guard(__a, 1);
        -: 1240:    _ControlBlock* __control_block = reinterpret_cast<_ControlBlock*>(std::addressof(*__guard.__get()));
        -: 1241:    std::__construct_at(__control_block, __a, std::forward<_Arg>(__arg)...);
        -: 1242:    __guard.__release_ptr();
        -: 1243:    return shared_ptr<_Array>::__create_with_control_block(__control_block->__get_data(), __control_block);
        -: 1244:}
        -: 1245:
        -: 1246:#endif // _LIBCPP_STD_VER >= 17
        -: 1247:
        -: 1248:#if _LIBCPP_STD_VER >= 20
        -: 1249:
        -: 1250:// bounded array variants
        -: 1251:template<class _Tp, class _Alloc, class = __enable_if_t<is_bounded_array<_Tp>::value>>
        -: 1252:_LIBCPP_HIDE_FROM_ABI
        -: 1253:shared_ptr<_Tp> allocate_shared(const _Alloc& __a)
        -: 1254:{
        -: 1255:    return std::__allocate_shared_bounded_array<_Tp>(__a);
        -: 1256:}
        -: 1257:
        -: 1258:template<class _Tp, class _Alloc, class = __enable_if_t<is_bounded_array<_Tp>::value>>
        -: 1259:_LIBCPP_HIDE_FROM_ABI
        -: 1260:shared_ptr<_Tp> allocate_shared(const _Alloc& __a, const remove_extent_t<_Tp>& __u)
        -: 1261:{
        -: 1262:    return std::__allocate_shared_bounded_array<_Tp>(__a, __u);
        -: 1263:}
        -: 1264:
        -: 1265:template<class _Tp, class _Alloc, __enable_if_t<is_bounded_array<_Tp>::value, int> = 0>
        -: 1266:_LIBCPP_HIDE_FROM_ABI
        -: 1267:shared_ptr<_Tp> allocate_shared_for_overwrite(const _Alloc& __a)
        -: 1268:{
        -: 1269:    using _ForOverwriteAllocator = __allocator_traits_rebind_t<_Alloc, __for_overwrite_tag>;
        -: 1270:    _ForOverwriteAllocator __alloc(__a);
        -: 1271:    return std::__allocate_shared_bounded_array<_Tp>(__alloc);
        -: 1272:}
        -: 1273:
        -: 1274:template<class _Tp, class = __enable_if_t<is_bounded_array<_Tp>::value>>
        -: 1275:_LIBCPP_HIDE_FROM_ABI
        -: 1276:shared_ptr<_Tp> make_shared()
        -: 1277:{
        -: 1278:    return std::__allocate_shared_bounded_array<_Tp>(allocator<_Tp>());
        -: 1279:}
        -: 1280:
        -: 1281:template<class _Tp, class = __enable_if_t<is_bounded_array<_Tp>::value>>
        -: 1282:_LIBCPP_HIDE_FROM_ABI
        -: 1283:shared_ptr<_Tp> make_shared(const remove_extent_t<_Tp>& __u)
        -: 1284:{
        -: 1285:    return std::__allocate_shared_bounded_array<_Tp>(allocator<_Tp>(), __u);
        -: 1286:}
        -: 1287:
        -: 1288:template<class _Tp, __enable_if_t<is_bounded_array<_Tp>::value, int> = 0>
        -: 1289:_LIBCPP_HIDE_FROM_ABI
        -: 1290:shared_ptr<_Tp> make_shared_for_overwrite()
        -: 1291:{
        -: 1292:    return std::__allocate_shared_bounded_array<_Tp>(allocator<__for_overwrite_tag>());
        -: 1293:}
        -: 1294:
        -: 1295:// unbounded array variants
        -: 1296:template<class _Tp, class _Alloc, class = __enable_if_t<is_unbounded_array<_Tp>::value>>
        -: 1297:_LIBCPP_HIDE_FROM_ABI
        -: 1298:shared_ptr<_Tp> allocate_shared(const _Alloc& __a, size_t __n)
        -: 1299:{
        -: 1300:    return std::__allocate_shared_unbounded_array<_Tp>(__a, __n);
        -: 1301:}
        -: 1302:
        -: 1303:template<class _Tp, class _Alloc, class = __enable_if_t<is_unbounded_array<_Tp>::value>>
        -: 1304:_LIBCPP_HIDE_FROM_ABI
        -: 1305:shared_ptr<_Tp> allocate_shared(const _Alloc& __a, size_t __n, const remove_extent_t<_Tp>& __u)
        -: 1306:{
        -: 1307:    return std::__allocate_shared_unbounded_array<_Tp>(__a, __n, __u);
        -: 1308:}
        -: 1309:
        -: 1310:template<class _Tp, class _Alloc, __enable_if_t<is_unbounded_array<_Tp>::value, int> = 0>
        -: 1311:_LIBCPP_HIDE_FROM_ABI
        -: 1312:shared_ptr<_Tp> allocate_shared_for_overwrite(const _Alloc& __a, size_t __n)
        -: 1313:{
        -: 1314:    using _ForOverwriteAllocator = __allocator_traits_rebind_t<_Alloc, __for_overwrite_tag>;
        -: 1315:    _ForOverwriteAllocator __alloc(__a);
        -: 1316:    return std::__allocate_shared_unbounded_array<_Tp>(__alloc, __n);
        -: 1317:}
        -: 1318:
        -: 1319:template<class _Tp, class = __enable_if_t<is_unbounded_array<_Tp>::value>>
        -: 1320:_LIBCPP_HIDE_FROM_ABI
        -: 1321:shared_ptr<_Tp> make_shared(size_t __n)
        -: 1322:{
        -: 1323:    return std::__allocate_shared_unbounded_array<_Tp>(allocator<_Tp>(), __n);
        -: 1324:}
        -: 1325:
        -: 1326:template<class _Tp, class = __enable_if_t<is_unbounded_array<_Tp>::value>>
        -: 1327:_LIBCPP_HIDE_FROM_ABI
        -: 1328:shared_ptr<_Tp> make_shared(size_t __n, const remove_extent_t<_Tp>& __u)
        -: 1329:{
        -: 1330:    return std::__allocate_shared_unbounded_array<_Tp>(allocator<_Tp>(), __n, __u);
        -: 1331:}
        -: 1332:
        -: 1333:template<class _Tp, __enable_if_t<is_unbounded_array<_Tp>::value, int> = 0>
        -: 1334:_LIBCPP_HIDE_FROM_ABI
        -: 1335:shared_ptr<_Tp> make_shared_for_overwrite(size_t __n)
        -: 1336:{
        -: 1337:    return std::__allocate_shared_unbounded_array<_Tp>(allocator<__for_overwrite_tag>(), __n);
        -: 1338:}
        -: 1339:
        -: 1340:#endif // _LIBCPP_STD_VER >= 20
        -: 1341:
        -: 1342:template<class _Tp, class _Up>
        -: 1343:inline _LIBCPP_INLINE_VISIBILITY
        -: 1344:bool
        -: 1345:operator==(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1346:{
        -: 1347:    return __x.get() == __y.get();
        -: 1348:}
        -: 1349:
        -: 1350:#if _LIBCPP_STD_VER <= 17
        -: 1351:
        -: 1352:template<class _Tp, class _Up>
        -: 1353:inline _LIBCPP_INLINE_VISIBILITY
        -: 1354:bool
        -: 1355:operator!=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1356:{
        -: 1357:    return !(__x == __y);
        -: 1358:}
        -: 1359:
        -: 1360:template<class _Tp, class _Up>
        -: 1361:inline _LIBCPP_INLINE_VISIBILITY
        -: 1362:bool
        -: 1363:operator<(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1364:{
        -: 1365:#if _LIBCPP_STD_VER <= 11
        -: 1366:    typedef typename common_type<_Tp*, _Up*>::type _Vp;
        -: 1367:    return less<_Vp>()(__x.get(), __y.get());
        -: 1368:#else
        -: 1369:    return less<>()(__x.get(), __y.get());
        -: 1370:#endif
        -: 1371:
        -: 1372:}
        -: 1373:
        -: 1374:template<class _Tp, class _Up>
        -: 1375:inline _LIBCPP_INLINE_VISIBILITY
        -: 1376:bool
        -: 1377:operator>(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1378:{
        -: 1379:    return __y < __x;
        -: 1380:}
        -: 1381:
        -: 1382:template<class _Tp, class _Up>
        -: 1383:inline _LIBCPP_INLINE_VISIBILITY
        -: 1384:bool
        -: 1385:operator<=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1386:{
        -: 1387:    return !(__y < __x);
        -: 1388:}
        -: 1389:
        -: 1390:template<class _Tp, class _Up>
        -: 1391:inline _LIBCPP_INLINE_VISIBILITY
        -: 1392:bool
        -: 1393:operator>=(const shared_ptr<_Tp>& __x, const shared_ptr<_Up>& __y) _NOEXCEPT
        -: 1394:{
        -: 1395:    return !(__x < __y);
        -: 1396:}
        -: 1397:
        -: 1398:#endif // _LIBCPP_STD_VER <= 17
        -: 1399:
        -: 1400:#if _LIBCPP_STD_VER >= 20
        -: 1401:template<class _Tp, class _Up>
        -: 1402:_LIBCPP_HIDE_FROM_ABI strong_ordering
        -: 1403:operator<=>(shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) noexcept
        -: 1404:{
        -: 1405:    return compare_three_way()(__x.get(), __y.get());
        -: 1406:}
        -: 1407:#endif
        -: 1408:
        -: 1409:template<class _Tp>
        -: 1410:inline _LIBCPP_INLINE_VISIBILITY
        -: 1411:bool
        -: 1412:operator==(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1413:{
        -: 1414:    return !__x;
        -: 1415:}
        -: 1416:
        -: 1417:#if _LIBCPP_STD_VER <= 17
        -: 1418:
        -: 1419:template<class _Tp>
        -: 1420:inline _LIBCPP_INLINE_VISIBILITY
        -: 1421:bool
        -: 1422:operator==(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1423:{
        -: 1424:    return !__x;
        -: 1425:}
        -: 1426:
        -: 1427:template<class _Tp>
        -: 1428:inline _LIBCPP_INLINE_VISIBILITY
        -: 1429:bool
        -: 1430:operator!=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1431:{
        -: 1432:    return static_cast<bool>(__x);
        -: 1433:}
        -: 1434:
        -: 1435:template<class _Tp>
        -: 1436:inline _LIBCPP_INLINE_VISIBILITY
        -: 1437:bool
        -: 1438:operator!=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1439:{
        -: 1440:    return static_cast<bool>(__x);
        -: 1441:}
        -: 1442:
        -: 1443:template<class _Tp>
        -: 1444:inline _LIBCPP_INLINE_VISIBILITY
        -: 1445:bool
        -: 1446:operator<(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1447:{
        -: 1448:    return less<_Tp*>()(__x.get(), nullptr);
        -: 1449:}
        -: 1450:
        -: 1451:template<class _Tp>
        -: 1452:inline _LIBCPP_INLINE_VISIBILITY
        -: 1453:bool
        -: 1454:operator<(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1455:{
        -: 1456:    return less<_Tp*>()(nullptr, __x.get());
        -: 1457:}
        -: 1458:
        -: 1459:template<class _Tp>
        -: 1460:inline _LIBCPP_INLINE_VISIBILITY
        -: 1461:bool
        -: 1462:operator>(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1463:{
        -: 1464:    return nullptr < __x;
        -: 1465:}
        -: 1466:
        -: 1467:template<class _Tp>
        -: 1468:inline _LIBCPP_INLINE_VISIBILITY
        -: 1469:bool
        -: 1470:operator>(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1471:{
        -: 1472:    return __x < nullptr;
        -: 1473:}
        -: 1474:
        -: 1475:template<class _Tp>
        -: 1476:inline _LIBCPP_INLINE_VISIBILITY
        -: 1477:bool
        -: 1478:operator<=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1479:{
        -: 1480:    return !(nullptr < __x);
        -: 1481:}
        -: 1482:
        -: 1483:template<class _Tp>
        -: 1484:inline _LIBCPP_INLINE_VISIBILITY
        -: 1485:bool
        -: 1486:operator<=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1487:{
        -: 1488:    return !(__x < nullptr);
        -: 1489:}
        -: 1490:
        -: 1491:template<class _Tp>
        -: 1492:inline _LIBCPP_INLINE_VISIBILITY
        -: 1493:bool
        -: 1494:operator>=(const shared_ptr<_Tp>& __x, nullptr_t) _NOEXCEPT
        -: 1495:{
        -: 1496:    return !(__x < nullptr);
        -: 1497:}
        -: 1498:
        -: 1499:template<class _Tp>
        -: 1500:inline _LIBCPP_INLINE_VISIBILITY
        -: 1501:bool
        -: 1502:operator>=(nullptr_t, const shared_ptr<_Tp>& __x) _NOEXCEPT
        -: 1503:{
        -: 1504:    return !(nullptr < __x);
        -: 1505:}
        -: 1506:
        -: 1507:#endif // _LIBCPP_STD_VER <= 17
        -: 1508:
        -: 1509:#if _LIBCPP_STD_VER >= 20
        -: 1510:template<class _Tp>
        -: 1511:_LIBCPP_HIDE_FROM_ABI strong_ordering
        -: 1512:operator<=>(shared_ptr<_Tp> const& __x, nullptr_t) noexcept
        -: 1513:{
        -: 1514:    return compare_three_way()(__x.get(), static_cast<typename shared_ptr<_Tp>::element_type*>(nullptr));
        -: 1515:}
        -: 1516:#endif
        -: 1517:
        -: 1518:template<class _Tp>
        -: 1519:inline _LIBCPP_INLINE_VISIBILITY
        -: 1520:void
        -: 1521:swap(shared_ptr<_Tp>& __x, shared_ptr<_Tp>& __y) _NOEXCEPT
        -: 1522:{
        -: 1523:    __x.swap(__y);
        -: 1524:}
        -: 1525:
        -: 1526:template<class _Tp, class _Up>
        -: 1527:inline _LIBCPP_INLINE_VISIBILITY
        -: 1528:shared_ptr<_Tp>
function _ZNSt3__119static_pointer_castB8ue170006I12ZooVetClinicvEENS_10shared_ptrIT_EERKNS2_IT0_EE called 1 returned 100% blocks executed 100%
        1: 1529:static_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 1530:{
        2: 1531:    return shared_ptr<_Tp>(__r,
        1: 1531-block  0
        1: 1531-block  1
        -: 1532:                           static_cast<
        1: 1533:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 1534:}
        -: 1535:
        -: 1536:// LWG-2996
        -: 1537:// We don't backport because it is an evolutionary change.
        -: 1538:#if _LIBCPP_STD_VER >= 20
        -: 1539:template <class _Tp, class _Up>
        -: 1540:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp> static_pointer_cast(shared_ptr<_Up>&& __r) noexcept {
        -: 1541:  return shared_ptr<_Tp>(std::move(__r), static_cast<typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 1542:}
        -: 1543:#endif
        -: 1544:
        -: 1545:template<class _Tp, class _Up>
        -: 1546:inline _LIBCPP_INLINE_VISIBILITY
        -: 1547:shared_ptr<_Tp>
        -: 1548:dynamic_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 1549:{
        -: 1550:    typedef typename shared_ptr<_Tp>::element_type _ET;
        -: 1551:    _ET* __p = dynamic_cast<_ET*>(__r.get());
        -: 1552:    return __p ? shared_ptr<_Tp>(__r, __p) : shared_ptr<_Tp>();
        -: 1553:}
        -: 1554:
        -: 1555:// LWG-2996
        -: 1556:// We don't backport because it is an evolutionary change.
        -: 1557:#if _LIBCPP_STD_VER >= 20
        -: 1558:template <class _Tp, class _Up>
        -: 1559:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp> dynamic_pointer_cast(shared_ptr<_Up>&& __r) noexcept {
        -: 1560:  auto* __p = dynamic_cast<typename shared_ptr<_Tp>::element_type*>(__r.get());
        -: 1561:  return __p ? shared_ptr<_Tp>(std::move(__r), __p) : shared_ptr<_Tp>();
        -: 1562:}
        -: 1563:#endif
        -: 1564:
        -: 1565:template<class _Tp, class _Up>
        -: 1566:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>
        -: 1567:const_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 1568:{
        -: 1569:    typedef typename shared_ptr<_Tp>::element_type _RTp;
        -: 1570:    return shared_ptr<_Tp>(__r, const_cast<_RTp*>(__r.get()));
        -: 1571:}
        -: 1572:
        -: 1573:// LWG-2996
        -: 1574:// We don't backport because it is an evolutionary change.
        -: 1575:#if _LIBCPP_STD_VER >= 20
        -: 1576:template <class _Tp, class _Up>
        -: 1577:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp> const_pointer_cast(shared_ptr<_Up>&& __r) noexcept {
        -: 1578:  return shared_ptr<_Tp>(std::move(__r), const_cast<typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 1579:}
        -: 1580:#endif
        -: 1581:
        -: 1582:template<class _Tp, class _Up>
        -: 1583:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>
        -: 1584:reinterpret_pointer_cast(const shared_ptr<_Up>& __r) _NOEXCEPT
        -: 1585:{
        -: 1586:    return shared_ptr<_Tp>(__r,
        -: 1587:                           reinterpret_cast<
        -: 1588:                               typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 1589:}
        -: 1590:
        -: 1591:// LWG-2996
        -: 1592:// We don't backport because it is an evolutionary change.
        -: 1593:#if _LIBCPP_STD_VER >= 20
        -: 1594:template <class _Tp, class _Up>
        -: 1595:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp> reinterpret_pointer_cast(shared_ptr<_Up>&& __r) noexcept {
        -: 1596:  return shared_ptr<_Tp>(std::move(__r), reinterpret_cast<typename shared_ptr<_Tp>::element_type*>(__r.get()));
        -: 1597:}
        -: 1598:#endif
        -: 1599:
        -: 1600:#ifndef _LIBCPP_HAS_NO_RTTI
        -: 1601:
        -: 1602:template<class _Dp, class _Tp>
        -: 1603:inline _LIBCPP_INLINE_VISIBILITY
        -: 1604:_Dp*
        -: 1605:get_deleter(const shared_ptr<_Tp>& __p) _NOEXCEPT
        -: 1606:{
        -: 1607:    return __p.template __get_deleter<_Dp>();
        -: 1608:}
        -: 1609:
        -: 1610:#endif // _LIBCPP_HAS_NO_RTTI
        -: 1611:
        -: 1612:template<class _Tp>
        -: 1613:class _LIBCPP_SHARED_PTR_TRIVIAL_ABI _LIBCPP_TEMPLATE_VIS weak_ptr
        -: 1614:{
        -: 1615:public:
        -: 1616:#if _LIBCPP_STD_VER >= 17
        -: 1617:    typedef remove_extent_t<_Tp> element_type;
        -: 1618:#else
        -: 1619:    typedef _Tp element_type;
        -: 1620:#endif
        -: 1621:
        -: 1622:private:
        -: 1623:    element_type*        __ptr_;
        -: 1624:    __shared_weak_count* __cntrl_;
        -: 1625:
        -: 1626:public:
        -: 1627:    _LIBCPP_INLINE_VISIBILITY
        -: 1628:    _LIBCPP_CONSTEXPR weak_ptr() _NOEXCEPT;
        -: 1629:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(shared_ptr<_Yp> const& __r,
        -: 1630:                   typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)
        -: 1631:                        _NOEXCEPT;
        -: 1632:    _LIBCPP_INLINE_VISIBILITY
        -: 1633:    weak_ptr(weak_ptr const& __r) _NOEXCEPT;
        -: 1634:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp> const& __r,
        -: 1635:                   typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)
        -: 1636:                         _NOEXCEPT;
        -: 1637:
        -: 1638:    _LIBCPP_INLINE_VISIBILITY
        -: 1639:    weak_ptr(weak_ptr&& __r) _NOEXCEPT;
        -: 1640:    template<class _Yp> _LIBCPP_INLINE_VISIBILITY weak_ptr(weak_ptr<_Yp>&& __r,
        -: 1641:                   typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type = 0)
        -: 1642:                         _NOEXCEPT;
        -: 1643:    _LIBCPP_HIDE_FROM_ABI ~weak_ptr();
        -: 1644:
        -: 1645:    _LIBCPP_INLINE_VISIBILITY
        -: 1646:    weak_ptr& operator=(weak_ptr const& __r) _NOEXCEPT;
        -: 1647:    template<class _Yp>
        -: 1648:        typename enable_if
        -: 1649:        <
        -: 1650:            __compatible_with<_Yp, _Tp>::value,
        -: 1651:            weak_ptr&
        -: 1652:        >::type
        -: 1653:        _LIBCPP_INLINE_VISIBILITY
        -: 1654:        operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 1655:
        -: 1656:    _LIBCPP_INLINE_VISIBILITY
        -: 1657:    weak_ptr& operator=(weak_ptr&& __r) _NOEXCEPT;
        -: 1658:    template<class _Yp>
        -: 1659:        typename enable_if
        -: 1660:        <
        -: 1661:            __compatible_with<_Yp, _Tp>::value,
        -: 1662:            weak_ptr&
        -: 1663:        >::type
        -: 1664:        _LIBCPP_INLINE_VISIBILITY
        -: 1665:        operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT;
        -: 1666:
        -: 1667:    template<class _Yp>
        -: 1668:        typename enable_if
        -: 1669:        <
        -: 1670:            __compatible_with<_Yp, _Tp>::value,
        -: 1671:            weak_ptr&
        -: 1672:        >::type
        -: 1673:        _LIBCPP_INLINE_VISIBILITY
        -: 1674:        operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT;
        -: 1675:
        -: 1676:    _LIBCPP_INLINE_VISIBILITY
        -: 1677:    void swap(weak_ptr& __r) _NOEXCEPT;
        -: 1678:    _LIBCPP_INLINE_VISIBILITY
        -: 1679:    void reset() _NOEXCEPT;
        -: 1680:
        -: 1681:    _LIBCPP_INLINE_VISIBILITY
        -: 1682:    long use_count() const _NOEXCEPT
        -: 1683:        {return __cntrl_ ? __cntrl_->use_count() : 0;}
        -: 1684:    _LIBCPP_INLINE_VISIBILITY
        -: 1685:    bool expired() const _NOEXCEPT
        -: 1686:        {return __cntrl_ == nullptr || __cntrl_->use_count() == 0;}
        -: 1687:    _LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp> lock() const _NOEXCEPT;
        -: 1688:    template<class _Up>
        -: 1689:        _LIBCPP_INLINE_VISIBILITY
        -: 1690:        bool owner_before(const shared_ptr<_Up>& __r) const _NOEXCEPT
        -: 1691:        {return __cntrl_ < __r.__cntrl_;}
        -: 1692:    template<class _Up>
        -: 1693:        _LIBCPP_INLINE_VISIBILITY
        -: 1694:        bool owner_before(const weak_ptr<_Up>& __r) const _NOEXCEPT
        -: 1695:        {return __cntrl_ < __r.__cntrl_;}
        -: 1696:
        -: 1697:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS weak_ptr;
        -: 1698:    template <class _Up> friend class _LIBCPP_TEMPLATE_VIS shared_ptr;
        -: 1699:};
        -: 1700:
        -: 1701:#if _LIBCPP_STD_VER >= 17
        -: 1702:template<class _Tp>
        -: 1703:weak_ptr(shared_ptr<_Tp>) -> weak_ptr<_Tp>;
        -: 1704:#endif
        -: 1705:
        -: 1706:template<class _Tp>
        -: 1707:inline
        -: 1708:_LIBCPP_CONSTEXPR
        -: 1709:weak_ptr<_Tp>::weak_ptr() _NOEXCEPT
        -: 1710:    : __ptr_(nullptr),
        -: 1711:      __cntrl_(nullptr)
        -: 1712:{
        -: 1713:}
        -: 1714:
        -: 1715:template<class _Tp>
        -: 1716:inline
        -: 1717:weak_ptr<_Tp>::weak_ptr(weak_ptr const& __r) _NOEXCEPT
        -: 1718:    : __ptr_(__r.__ptr_),
        -: 1719:      __cntrl_(__r.__cntrl_)
        -: 1720:{
        -: 1721:    if (__cntrl_)
        -: 1722:        __cntrl_->__add_weak();
        -: 1723:}
        -: 1724:
        -: 1725:template<class _Tp>
        -: 1726:template<class _Yp>
        -: 1727:inline
        -: 1728:weak_ptr<_Tp>::weak_ptr(shared_ptr<_Yp> const& __r,
        -: 1729:                        typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type)
        -: 1730:                         _NOEXCEPT
        -: 1731:    : __ptr_(__r.__ptr_),
        -: 1732:      __cntrl_(__r.__cntrl_)
        -: 1733:{
        -: 1734:    if (__cntrl_)
        -: 1735:        __cntrl_->__add_weak();
        -: 1736:}
        -: 1737:
        -: 1738:template<class _Tp>
        -: 1739:template<class _Yp>
        -: 1740:inline
        -: 1741:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp> const& __r,
        -: 1742:                        typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type)
        -: 1743:         _NOEXCEPT
        -: 1744:    : __ptr_(__r.__ptr_),
        -: 1745:      __cntrl_(__r.__cntrl_)
        -: 1746:{
        -: 1747:    if (__cntrl_)
        -: 1748:        __cntrl_->__add_weak();
        -: 1749:}
        -: 1750:
        -: 1751:template<class _Tp>
        -: 1752:inline
        -: 1753:weak_ptr<_Tp>::weak_ptr(weak_ptr&& __r) _NOEXCEPT
        -: 1754:    : __ptr_(__r.__ptr_),
        -: 1755:      __cntrl_(__r.__cntrl_)
        -: 1756:{
        -: 1757:    __r.__ptr_ = nullptr;
        -: 1758:    __r.__cntrl_ = nullptr;
        -: 1759:}
        -: 1760:
        -: 1761:template<class _Tp>
        -: 1762:template<class _Yp>
        -: 1763:inline
        -: 1764:weak_ptr<_Tp>::weak_ptr(weak_ptr<_Yp>&& __r,
        -: 1765:                        typename enable_if<__compatible_with<_Yp, _Tp>::value, __nat*>::type)
        -: 1766:         _NOEXCEPT
        -: 1767:    : __ptr_(__r.__ptr_),
        -: 1768:      __cntrl_(__r.__cntrl_)
        -: 1769:{
        -: 1770:    __r.__ptr_ = nullptr;
        -: 1771:    __r.__cntrl_ = nullptr;
        -: 1772:}
        -: 1773:
        -: 1774:template<class _Tp>
        -: 1775:weak_ptr<_Tp>::~weak_ptr()
        -: 1776:{
        -: 1777:    if (__cntrl_)
        -: 1778:        __cntrl_->__release_weak();
        -: 1779:}
        -: 1780:
        -: 1781:template<class _Tp>
        -: 1782:inline
        -: 1783:weak_ptr<_Tp>&
        -: 1784:weak_ptr<_Tp>::operator=(weak_ptr const& __r) _NOEXCEPT
        -: 1785:{
        -: 1786:    weak_ptr(__r).swap(*this);
        -: 1787:    return *this;
        -: 1788:}
        -: 1789:
        -: 1790:template<class _Tp>
        -: 1791:template<class _Yp>
        -: 1792:inline
        -: 1793:typename enable_if
        -: 1794:<
        -: 1795:    __compatible_with<_Yp, _Tp>::value,
        -: 1796:    weak_ptr<_Tp>&
        -: 1797:>::type
        -: 1798:weak_ptr<_Tp>::operator=(weak_ptr<_Yp> const& __r) _NOEXCEPT
        -: 1799:{
        -: 1800:    weak_ptr(__r).swap(*this);
        -: 1801:    return *this;
        -: 1802:}
        -: 1803:
        -: 1804:template<class _Tp>
        -: 1805:inline
        -: 1806:weak_ptr<_Tp>&
        -: 1807:weak_ptr<_Tp>::operator=(weak_ptr&& __r) _NOEXCEPT
        -: 1808:{
        -: 1809:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 1810:    return *this;
        -: 1811:}
        -: 1812:
        -: 1813:template<class _Tp>
        -: 1814:template<class _Yp>
        -: 1815:inline
        -: 1816:typename enable_if
        -: 1817:<
        -: 1818:    __compatible_with<_Yp, _Tp>::value,
        -: 1819:    weak_ptr<_Tp>&
        -: 1820:>::type
        -: 1821:weak_ptr<_Tp>::operator=(weak_ptr<_Yp>&& __r) _NOEXCEPT
        -: 1822:{
        -: 1823:    weak_ptr(_VSTD::move(__r)).swap(*this);
        -: 1824:    return *this;
        -: 1825:}
        -: 1826:
        -: 1827:template<class _Tp>
        -: 1828:template<class _Yp>
        -: 1829:inline
        -: 1830:typename enable_if
        -: 1831:<
        -: 1832:    __compatible_with<_Yp, _Tp>::value,
        -: 1833:    weak_ptr<_Tp>&
        -: 1834:>::type
        -: 1835:weak_ptr<_Tp>::operator=(shared_ptr<_Yp> const& __r) _NOEXCEPT
        -: 1836:{
        -: 1837:    weak_ptr(__r).swap(*this);
        -: 1838:    return *this;
        -: 1839:}
        -: 1840:
        -: 1841:template<class _Tp>
        -: 1842:inline
        -: 1843:void
        -: 1844:weak_ptr<_Tp>::swap(weak_ptr& __r) _NOEXCEPT
        -: 1845:{
        -: 1846:    _VSTD::swap(__ptr_, __r.__ptr_);
        -: 1847:    _VSTD::swap(__cntrl_, __r.__cntrl_);
        -: 1848:}
        -: 1849:
        -: 1850:template<class _Tp>
        -: 1851:inline _LIBCPP_INLINE_VISIBILITY
        -: 1852:void
        -: 1853:swap(weak_ptr<_Tp>& __x, weak_ptr<_Tp>& __y) _NOEXCEPT
        -: 1854:{
        -: 1855:    __x.swap(__y);
        -: 1856:}
        -: 1857:
        -: 1858:template<class _Tp>
        -: 1859:inline
        -: 1860:void
        -: 1861:weak_ptr<_Tp>::reset() _NOEXCEPT
        -: 1862:{
        -: 1863:    weak_ptr().swap(*this);
        -: 1864:}
        -: 1865:
        -: 1866:template<class _Tp>
        -: 1867:shared_ptr<_Tp>
        -: 1868:weak_ptr<_Tp>::lock() const _NOEXCEPT
        -: 1869:{
        -: 1870:    shared_ptr<_Tp> __r;
        -: 1871:    __r.__cntrl_ = __cntrl_ ? __cntrl_->lock() : __cntrl_;
        -: 1872:    if (__r.__cntrl_)
        -: 1873:        __r.__ptr_ = __ptr_;
        -: 1874:    return __r;
        -: 1875:}
        -: 1876:
        -: 1877:#if _LIBCPP_STD_VER >= 17
        -: 1878:template <class _Tp = void> struct owner_less;
        -: 1879:#else
        -: 1880:template <class _Tp> struct owner_less;
        -: 1881:#endif
        -: 1882:
        -: 1883:
        -: 1884:template <class _Tp>
        -: 1885:struct _LIBCPP_TEMPLATE_VIS owner_less<shared_ptr<_Tp> >
        -: 1886:    : __binary_function<shared_ptr<_Tp>, shared_ptr<_Tp>, bool>
        -: 1887:{
        -: 1888:    _LIBCPP_INLINE_VISIBILITY
        -: 1889:    bool operator()(shared_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1890:        {return __x.owner_before(__y);}
        -: 1891:    _LIBCPP_INLINE_VISIBILITY
        -: 1892:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1893:        {return __x.owner_before(__y);}
        -: 1894:    _LIBCPP_INLINE_VISIBILITY
        -: 1895:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1896:        {return __x.owner_before(__y);}
        -: 1897:};
        -: 1898:
        -: 1899:template <class _Tp>
        -: 1900:struct _LIBCPP_TEMPLATE_VIS owner_less<weak_ptr<_Tp> >
        -: 1901:    : __binary_function<weak_ptr<_Tp>, weak_ptr<_Tp>, bool>
        -: 1902:{
        -: 1903:    _LIBCPP_INLINE_VISIBILITY
        -: 1904:    bool operator()(  weak_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1905:        {return __x.owner_before(__y);}
        -: 1906:    _LIBCPP_INLINE_VISIBILITY
        -: 1907:    bool operator()(shared_ptr<_Tp> const& __x,   weak_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1908:        {return __x.owner_before(__y);}
        -: 1909:    _LIBCPP_INLINE_VISIBILITY
        -: 1910:    bool operator()(  weak_ptr<_Tp> const& __x, shared_ptr<_Tp> const& __y) const _NOEXCEPT
        -: 1911:        {return __x.owner_before(__y);}
        -: 1912:};
        -: 1913:
        -: 1914:#if _LIBCPP_STD_VER >= 17
        -: 1915:template <>
        -: 1916:struct _LIBCPP_TEMPLATE_VIS owner_less<void>
        -: 1917:{
        -: 1918:    template <class _Tp, class _Up>
        -: 1919:    _LIBCPP_INLINE_VISIBILITY
        -: 1920:    bool operator()( shared_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 1921:        {return __x.owner_before(__y);}
        -: 1922:    template <class _Tp, class _Up>
        -: 1923:    _LIBCPP_INLINE_VISIBILITY
        -: 1924:    bool operator()( shared_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 1925:        {return __x.owner_before(__y);}
        -: 1926:    template <class _Tp, class _Up>
        -: 1927:    _LIBCPP_INLINE_VISIBILITY
        -: 1928:    bool operator()(   weak_ptr<_Tp> const& __x, shared_ptr<_Up> const& __y) const _NOEXCEPT
        -: 1929:        {return __x.owner_before(__y);}
        -: 1930:    template <class _Tp, class _Up>
        -: 1931:    _LIBCPP_INLINE_VISIBILITY
        -: 1932:    bool operator()(   weak_ptr<_Tp> const& __x,   weak_ptr<_Up> const& __y) const _NOEXCEPT
        -: 1933:        {return __x.owner_before(__y);}
        -: 1934:    typedef void is_transparent;
        -: 1935:};
        -: 1936:#endif
        -: 1937:
        -: 1938:template<class _Tp>
        -: 1939:class _LIBCPP_TEMPLATE_VIS enable_shared_from_this
        -: 1940:{
        -: 1941:    mutable weak_ptr<_Tp> __weak_this_;
        -: 1942:protected:
        -: 1943:    _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR
        -: 1944:    enable_shared_from_this() _NOEXCEPT {}
        -: 1945:    _LIBCPP_INLINE_VISIBILITY
        -: 1946:    enable_shared_from_this(enable_shared_from_this const&) _NOEXCEPT {}
        -: 1947:    _LIBCPP_INLINE_VISIBILITY
        -: 1948:    enable_shared_from_this& operator=(enable_shared_from_this const&) _NOEXCEPT
        -: 1949:        {return *this;}
        -: 1950:    _LIBCPP_INLINE_VISIBILITY
        -: 1951:    ~enable_shared_from_this() {}
        -: 1952:public:
        -: 1953:    _LIBCPP_INLINE_VISIBILITY
        -: 1954:    shared_ptr<_Tp> shared_from_this()
        -: 1955:        {return shared_ptr<_Tp>(__weak_this_);}
        -: 1956:    _LIBCPP_INLINE_VISIBILITY
        -: 1957:    shared_ptr<_Tp const> shared_from_this() const
        -: 1958:        {return shared_ptr<const _Tp>(__weak_this_);}
        -: 1959:
        -: 1960:#if _LIBCPP_STD_VER >= 17
        -: 1961:    _LIBCPP_INLINE_VISIBILITY
        -: 1962:    weak_ptr<_Tp> weak_from_this() _NOEXCEPT
        -: 1963:       { return __weak_this_; }
        -: 1964:
        -: 1965:    _LIBCPP_INLINE_VISIBILITY
        -: 1966:    weak_ptr<const _Tp> weak_from_this() const _NOEXCEPT
        -: 1967:        { return __weak_this_; }
        -: 1968:#endif // _LIBCPP_STD_VER >= 17
        -: 1969:
        -: 1970:    template <class _Up> friend class shared_ptr;
        -: 1971:};
        -: 1972:
        -: 1973:template <class _Tp> struct _LIBCPP_TEMPLATE_VIS hash;
        -: 1974:
        -: 1975:template <class _Tp>
        -: 1976:struct _LIBCPP_TEMPLATE_VIS hash<shared_ptr<_Tp> >
        -: 1977:{
        -: 1978:#if _LIBCPP_STD_VER <= 17 || defined(_LIBCPP_ENABLE_CXX20_REMOVED_BINDER_TYPEDEFS)
        -: 1979:    _LIBCPP_DEPRECATED_IN_CXX17 typedef shared_ptr<_Tp> argument_type;
        -: 1980:    _LIBCPP_DEPRECATED_IN_CXX17 typedef size_t          result_type;
        -: 1981:#endif
        -: 1982:
        -: 1983:    _LIBCPP_INLINE_VISIBILITY
        -: 1984:    size_t operator()(const shared_ptr<_Tp>& __ptr) const _NOEXCEPT
        -: 1985:    {
        -: 1986:        return hash<typename shared_ptr<_Tp>::element_type*>()(__ptr.get());
        -: 1987:    }
        -: 1988:};
        -: 1989:
        -: 1990:template<class _CharT, class _Traits, class _Yp>
        -: 1991:inline _LIBCPP_INLINE_VISIBILITY
        -: 1992:basic_ostream<_CharT, _Traits>&
        -: 1993:operator<<(basic_ostream<_CharT, _Traits>& __os, shared_ptr<_Yp> const& __p);
        -: 1994:
        -: 1995:
        -: 1996:#if !defined(_LIBCPP_HAS_NO_THREADS)
        -: 1997:
        -: 1998:class _LIBCPP_EXPORTED_FROM_ABI __sp_mut
        -: 1999:{
        -: 2000:    void* __lx_;
        -: 2001:public:
        -: 2002:    void lock() _NOEXCEPT;
        -: 2003:    void unlock() _NOEXCEPT;
        -: 2004:
        -: 2005:private:
        -: 2006:    _LIBCPP_CONSTEXPR __sp_mut(void*) _NOEXCEPT;
        -: 2007:    __sp_mut(const __sp_mut&);
        -: 2008:    __sp_mut& operator=(const __sp_mut&);
        -: 2009:
        -: 2010:    friend _LIBCPP_EXPORTED_FROM_ABI __sp_mut& __get_sp_mut(const void*);
        -: 2011:};
        -: 2012:
        -: 2013:_LIBCPP_EXPORTED_FROM_ABI _LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2014:__sp_mut& __get_sp_mut(const void*);
        -: 2015:
        -: 2016:template <class _Tp>
        -: 2017:inline _LIBCPP_INLINE_VISIBILITY
        -: 2018:bool
        -: 2019:atomic_is_lock_free(const shared_ptr<_Tp>*)
        -: 2020:{
        -: 2021:    return false;
        -: 2022:}
        -: 2023:
        -: 2024:template <class _Tp>
        -: 2025:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2026:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>
        -: 2027:atomic_load(const shared_ptr<_Tp>* __p)
        -: 2028:{
        -: 2029:    __sp_mut& __m = std::__get_sp_mut(__p);
        -: 2030:    __m.lock();
        -: 2031:    shared_ptr<_Tp> __q = *__p;
        -: 2032:    __m.unlock();
        -: 2033:    return __q;
        -: 2034:}
        -: 2035:
        -: 2036:template <class _Tp>
        -: 2037:inline _LIBCPP_INLINE_VISIBILITY
        -: 2038:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2039:shared_ptr<_Tp>
        -: 2040:atomic_load_explicit(const shared_ptr<_Tp>* __p, memory_order)
        -: 2041:{
        -: 2042:    return std::atomic_load(__p);
        -: 2043:}
        -: 2044:
        -: 2045:template <class _Tp>
        -: 2046:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2047:_LIBCPP_HIDE_FROM_ABI void
        -: 2048:atomic_store(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 2049:{
        -: 2050:    __sp_mut& __m = std::__get_sp_mut(__p);
        -: 2051:    __m.lock();
        -: 2052:    __p->swap(__r);
        -: 2053:    __m.unlock();
        -: 2054:}
        -: 2055:
        -: 2056:template <class _Tp>
        -: 2057:inline _LIBCPP_INLINE_VISIBILITY
        -: 2058:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2059:void
        -: 2060:atomic_store_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 2061:{
        -: 2062:    std::atomic_store(__p, __r);
        -: 2063:}
        -: 2064:
        -: 2065:template <class _Tp>
        -: 2066:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2067:_LIBCPP_HIDE_FROM_ABI shared_ptr<_Tp>
        -: 2068:atomic_exchange(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r)
        -: 2069:{
        -: 2070:    __sp_mut& __m = std::__get_sp_mut(__p);
        -: 2071:    __m.lock();
        -: 2072:    __p->swap(__r);
        -: 2073:    __m.unlock();
        -: 2074:    return __r;
        -: 2075:}
        -: 2076:
        -: 2077:template <class _Tp>
        -: 2078:inline _LIBCPP_INLINE_VISIBILITY
        -: 2079:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2080:shared_ptr<_Tp>
        -: 2081:atomic_exchange_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp> __r, memory_order)
        -: 2082:{
        -: 2083:    return std::atomic_exchange(__p, __r);
        -: 2084:}
        -: 2085:
        -: 2086:template <class _Tp>
        -: 2087:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2088:_LIBCPP_HIDE_FROM_ABI bool
        -: 2089:atomic_compare_exchange_strong(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 2090:{
        -: 2091:    shared_ptr<_Tp> __temp;
        -: 2092:    __sp_mut& __m = std::__get_sp_mut(__p);
        -: 2093:    __m.lock();
        -: 2094:    if (__p->__owner_equivalent(*__v))
        -: 2095:    {
        -: 2096:        _VSTD::swap(__temp, *__p);
        -: 2097:        *__p = __w;
        -: 2098:        __m.unlock();
        -: 2099:        return true;
        -: 2100:    }
        -: 2101:    _VSTD::swap(__temp, *__v);
        -: 2102:    *__v = *__p;
        -: 2103:    __m.unlock();
        -: 2104:    return false;
        -: 2105:}
        -: 2106:
        -: 2107:template <class _Tp>
        -: 2108:inline _LIBCPP_INLINE_VISIBILITY
        -: 2109:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2110:bool
        -: 2111:atomic_compare_exchange_weak(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v, shared_ptr<_Tp> __w)
        -: 2112:{
        -: 2113:    return std::atomic_compare_exchange_strong(__p, __v, __w);
        -: 2114:}
        -: 2115:
        -: 2116:template <class _Tp>
        -: 2117:inline _LIBCPP_INLINE_VISIBILITY
        -: 2118:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2119:bool
        -: 2120:atomic_compare_exchange_strong_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 2121:                                        shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 2122:{
        -: 2123:    return std::atomic_compare_exchange_strong(__p, __v, __w);
        -: 2124:}
        -: 2125:
        -: 2126:template <class _Tp>
        -: 2127:inline _LIBCPP_INLINE_VISIBILITY
        -: 2128:_LIBCPP_AVAILABILITY_ATOMIC_SHARED_PTR
        -: 2129:bool
        -: 2130:atomic_compare_exchange_weak_explicit(shared_ptr<_Tp>* __p, shared_ptr<_Tp>* __v,
        -: 2131:                                      shared_ptr<_Tp> __w, memory_order, memory_order)
        -: 2132:{
        -: 2133:    return std::atomic_compare_exchange_weak(__p, __v, __w);
        -: 2134:}
        -: 2135:
        -: 2136:#endif // !defined(_LIBCPP_HAS_NO_THREADS)
        -: 2137:
        -: 2138:_LIBCPP_END_NAMESPACE_STD
        -: 2139:
        -: 2140:#endif // _LIBCPP___MEMORY_SHARED_PTR_H
