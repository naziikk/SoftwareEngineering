        -:    0:Source:/Library/Developer/CommandLineTools/SDKs/MacOSX14.4.sdk/usr/include/c++/v1/__exception/exception.h
        -:    0:Graph:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcno
        -:    0:Data:/Users/nazarzakrevskij/CLionProjects/SoftwareEngineering/homework-1/cmake-build-debug/CMakeFiles/tests.dir/tests/tests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://===----------------------------------------------------------------------===//
        -:    2://
        -:    3:// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
        -:    4:// See https://llvm.org/LICENSE.txt for license information.
        -:    5:// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
        -:    6://
        -:    7://===----------------------------------------------------------------------===//
        -:    8:
        -:    9:#ifndef _LIBCPP___EXCEPTION_EXCEPTION_H
        -:   10:#define _LIBCPP___EXCEPTION_EXCEPTION_H
        -:   11:
        -:   12:#include <__config>
        -:   13:
        -:   14:// <vcruntime_exception.h> defines its own std::exception and std::bad_exception types,
        -:   15:// which we use in order to be ABI-compatible with other STLs on Windows.
        -:   16:#if defined(_LIBCPP_ABI_VCRUNTIME)
        -:   17:#  include <vcruntime_exception.h>
        -:   18:#endif
        -:   19:
        -:   20:#if !defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)
        -:   21:#  pragma GCC system_header
        -:   22:#endif
        -:   23:
        -:   24:namespace std { // purposefully not using versioning namespace
        -:   25:
        -:   26:#if defined(_LIBCPP_ABI_VCRUNTIME) && (!defined(_HAS_EXCEPTIONS) || _HAS_EXCEPTIONS != 0)
        -:   27:// The std::exception class was already included above, but we're explicit about this condition here for clarity.
        -:   28:
        -:   29:#elif defined(_LIBCPP_ABI_VCRUNTIME) && _HAS_EXCEPTIONS == 0
        -:   30:// However, <vcruntime_exception.h> does not define std::exception and std::bad_exception
        -:   31:// when _HAS_EXCEPTIONS == 0.
        -:   32://
        -:   33:// Since libc++ still wants to provide the std::exception hierarchy even when _HAS_EXCEPTIONS == 0
        -:   34:// (after all those are simply types like any other), we define an ABI-compatible version
        -:   35:// of the VCRuntime std::exception and std::bad_exception types in that mode.
        -:   36:
        -:   37:struct __std_exception_data {
        -:   38:  char const* _What;
        -:   39:  bool _DoFree;
        -:   40:};
        -:   41:
        -:   42:class exception { // base of all library exceptions
        -:   43:public:
        -:   44:  exception() _NOEXCEPT : __data_() {}
        -:   45:
        -:   46:  explicit exception(char const* __message) _NOEXCEPT : __data_() {
        -:   47:    __data_._What   = __message;
        -:   48:    __data_._DoFree = true;
        -:   49:  }
        -:   50:
        -:   51:  exception(exception const&) _NOEXCEPT {}
        -:   52:
        -:   53:  exception& operator=(exception const&) _NOEXCEPT { return *this; }
        -:   54:
        -:   55:  virtual ~exception() _NOEXCEPT {}
        -:   56:
        -:   57:  virtual char const* what() const _NOEXCEPT { return __data_._What ? __data_._What : "Unknown exception"; }
        -:   58:
        -:   59:private:
        -:   60:  __std_exception_data __data_;
        -:   61:};
        -:   62:
        -:   63:class bad_exception : public exception {
        -:   64:public:
        -:   65:  bad_exception() _NOEXCEPT : exception("bad exception") {}
        -:   66:};
        -:   67:
        -:   68:#else  // !defined(_LIBCPP_ABI_VCRUNTIME)
        -:   69:// On all other platforms, we define our own std::exception and std::bad_exception types
        -:   70:// regardless of whether exceptions are turned on as a language feature.
        -:   71:
        -:   72:class _LIBCPP_EXPORTED_FROM_ABI exception {
        -:   73:public:
function _ZNSt9exceptionC2B8ue170006Ev called 0 returned 0% blocks executed 0%
    #####:   74:  _LIBCPP_HIDE_FROM_ABI exception() _NOEXCEPT {}
    $$$$$:   74-block  0
        -:   75:  _LIBCPP_HIDE_FROM_ABI exception(const exception&) _NOEXCEPT = default;
        -:   76:
        -:   77:  virtual ~exception() _NOEXCEPT;
        -:   78:  virtual const char* what() const _NOEXCEPT;
        -:   79:};
        -:   80:
        -:   81:class _LIBCPP_EXPORTED_FROM_ABI bad_exception : public exception {
        -:   82:public:
        -:   83:  _LIBCPP_HIDE_FROM_ABI bad_exception() _NOEXCEPT {}
        -:   84:  ~bad_exception() _NOEXCEPT override;
        -:   85:  const char* what() const _NOEXCEPT override;
        -:   86:};
        -:   87:#endif // !_LIBCPP_ABI_VCRUNTIME
        -:   88:
        -:   89:} // namespace std
        -:   90:
        -:   91:#endif // _LIBCPP___EXCEPTION_EXCEPTION_H
