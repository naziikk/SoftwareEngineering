openapi: 3.0.0
info:
  title: ZooApp API
  version: 1.0.0
  description: API для управления зоопарком

servers:
  - url: http://localhost:8008
    description: Локальный сервер для разработки

tags:
  - name: AnimalsAPI
    description: Операции с животными (добавление, удаление, перемещение)
  - name: FeedingServiceApi
    description: Операции с сервисом кормления
  - name: EnclosureAPI
    description: Операции с вольерами
  - name: StatisticsAPI
    description: Операции со статистикой зоопарка

paths:
  /animal:
    post:
      tags:
        - AnimalsAPI
      summary: Добавление нового животного
      description: Добавляет новое животное в зоопарк с указанием его имени, вида и возраста.
      operationId: addAnimal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Имя животного
                  example: "Hamster"
                type:
                  type: string
                  description: Вид животного один из {"Herbo", "Predator", "Aquatic", "Bird"}
                  example: "Herbo"
                sex:
                  type: integer
                  description: Пол животного (0 - мужской, 1 женский)
                  example: 0
                favorite_food:
                  type: string
                  description: Любимая еда животного
                  example: "Seeds"
                health_status:
                  type: integer
                  description: Статус здоровья животного (0 - здоров, 1 - болен)
                  example: 0
                birthday:
                  type: string
                  format: date
                  description: Дата рождения животного в формате YYYY-MM-DD
                  example: "2023-01-01"
              required:
                - name
                - type
                - sex
                - favorite_food
                - health_status
                - birthday
      responses:
        200:
          description: Животное успешно добавлено
        400:
          description: Ошибка при добавлении животного (например, неверные данные)

  /animal/{id}:
    delete:
      tags:
        - AnimalsAPI
      summary: Удаление животного
      description: Удаляет животное из зоопарка по его уникальному идентификатору.
      operationId: deleteAnimal
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      responses:
        200:
          description: Животное успешно удалено
        404:
          description: Животное не найдено
        500:
          description: Ошибка сервера

  /animal/{id}/move:
    put:
      tags:
        - AnimalsAPI
      summary: Перемещение животного
      description: Перемещает животное в другой вольер по его уникальному идентификатору.
      operationId: moveAnimal
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enclosure_id:
                  type: integer
                  description: Уникальный идентификатор вольера, в который нужно переместить животное
                  example: 0
              required:
                - enclosure_id
      responses:
        200:
          description: Животное успешно перемещено
        400:
          description: Ошибка при перемещении животного (например, неверные данные)
        404:
          description: Животное или вольер не найдены

  /enclosure:
    post:
      tags:
        - EnclosureAPI
      summary: Добавление нового вольера
      description: Добавляет новый вольер в зоопарк с указанием его названия и типа.
      operationId: addEnclosure
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  description: Тип вольера, например, "Herbo", "Predator", "Aquatic", "Birds"
                  example: "Herbo"
                capacity:
                  type: int
                  description: Максимальная вместимость вольера
                  example: 3
              required:
                - type
                - capacity
      responses:
        200:
          description: Вольер успешно добавлен
        500:
          description: Ошибка сервера

  /enclosure/{id}:
    delete:
      tags:
        - EnclosureAPI
      summary: Удаление вольера
      description: Удаляет вольер из зоопарка по его уникальному идентификатору.
      operationId: deleteEnclosure
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор вольера
          schema:
            type: string
      responses:
        200:
          description: Вольер успешно удален
        404:
          description: Вольер не найден
        500:
          description: Ошибка сервера

  /animal/{id}/feed:
    post:
      tags:
        - AnimalsAPI
      summary: Кормление животного
      description: Кормит животное по его уникальному идентификатору.
      operationId: feedAnimal
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                food:
                  type: string
                  description: Тип корма для животного
                  example: "Seeds"
              required:
                - food
      responses:
        200:
          description: Животное успешно покормлено
        400:
          description: Ошибка при кормлении животного (например, неверные данные)
        404:
          description: Животное не найдено

  /animal/{id}/health_check:
    post:
      tags:
        - AnimalsAPI
      summary: Проверка здоровья животного
      description: Проверяет здоровье животного по его уникальному идентификатору.
      operationId: healthCheckAnimal
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      responses:
        200:
          description: Статус здоровья животного успешно обновлен
        400:
          description: Ошибка при обновлении статуса здоровья животного (например, неверные данные)
        404:
          description: Животное не найдено

  /zoo/statistics:
    get:
      tags:
        - StatisticsAPI
      summary: Получение статистики зоопарка
      description: Возвращает общую статистику зоопарка, включая количество животных и вольеров.
      operationId: getZooStatistics
      responses:
        200:
          description: Статистика зоопарка успешно получена
        #          content:
        #            application/json:
        #              schema:
        #                type: object
        #                properties:
        #                  total_animals:
        #                    type: integer
        #                    description: Общее количество животных в зоопарке
        #                    example: 10
        #                  total_enclosures:
        #                    type: integer
        #                    description: Общее количество вольеров в зоопарке
        #                    example: 5
        500:
          description: Ошибка сервера

  /enclosure/{id}/clean:
    post:
      tags:
        - EnclosureAPI
      summary: Уборка вольера
      description: Выполняет уборку вольера по его уникальному идентификатору. (Уборка производится не чаще чем в минуту, иначе возвращается ошибка 400)
      operationId: cleanEnclosure
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор вольера
          schema:
            type: string
      responses:
        200:
          description: Уборка вольера успешно выполнена
        400:
          description: Ошибка при уборке вольера (например, вольер уже убран и уборщик забастовал)
        404:
          description: Вольер не найден
        500:
          description: Ошибка сервера

  /animal/{id}/feeding_schedule/1:
    post:
      tags:
        - FeedingServiceApi
      summary: Добавление расписания кормления животного
      description: Добавление в расписание кормления животного по его уникальному идентификатору.
      operationId: addFeedingSchedule
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interval:
                  type: integer
                  description: Интервал для кормления в секундах
                  example: 30
              required:
                - interval
      responses:
        201:
          description: Расписание кормления успешно добавлено
        400:
          description: Ошибка при добавлении расписания кормления (например, неверные данные)
        404:
          description: Животное не найдено

  /animal/{id}/feeding_schedule/2:
    put:
      tags:
        - FeedingServiceApi
      summary: Обновление расписания кормления животного
      description: Обновление в расписание кормления животного по его уникальному идентификатору.
      operationId: updateFeedingSchedule
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                interval:
                  type: integer
                  description: Интервал для кормления в секундах
                  example: 30
              required:
                - interval
      responses:
        201:
          description: Расписание кормления успешно обновлено
        400:
          description: Ошибка при обновлении расписания кормления (например, неверные данные)
        404:
          description: Животное не найдено

  /animal/{id}/feeding_schedule/3:
    delete:
      tags:
        - FeedingServiceApi
      summary:  Сброс расписания
      description: Сброс расписание кормления животного по его уникальному идентификатору.
      operationId: cancelFeedingSchedule
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор животного
          schema:
            type: string
      responses:
        201:
          description: Расписание кормления успешно сброшено
        400:
          description: Ошибка при сбрасывании расписания кормления (например, неверные данные)
        404:
          description: Животное не найдено